diff -up o3de/Code/Framework/AzCore/Tests/AssetJsonSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AssetJsonSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/AssetJsonSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AssetJsonSerializerTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -189,5 +189,5 @@ namespace JsonSerializationTests
     };
 
     using AssetConformityTestTypes = ::testing::Types<AssetSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(Asset, JsonSerializerConformityTests, AssetConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(Asset, JsonSerializerConformityTests, AssetConformityTestTypes);
 } // namespace JsonSerializationTests
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/Any.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/Any.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/Any.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/Any.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -82,7 +82,7 @@ namespace UnitTest
         }
     };
     using AnySizedTestTypes = ::testing::Types<Small0, Large0, Align0>;
-    TYPED_TEST_CASE(AnySizedTest, AnySizedTestTypes);
+    TYPED_TEST_SUITE(AnySizedTest, AnySizedTestTypes);
 
     // Fixture for tests with 2 types (for converting between types)
     template <typename StructPair>
@@ -112,7 +112,7 @@ namespace UnitTest
         AZStd::pair<Align0, Small0>, // Align -> Small
         AZStd::pair<Align0, Large0>  // Align -> Large
     >;
-    TYPED_TEST_CASE(AnyConversionTest, AnyConversionTestTypes);
+    TYPED_TEST_SUITE(AnyConversionTest, AnyConversionTestTypes);
 
     //////////////////////////////////////////////////////////////////////////
     // Tests for constructors
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/Atomics.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/Atomics.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/Atomics.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/Atomics.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -139,9 +139,9 @@ namespace UnitTest
     template <class T>
     struct AtomicOpsPointer : public Atomics {};
 
-    TYPED_TEST_CASE(AtomicOps, AllAtomicTypes);
-    TYPED_TEST_CASE(AtomicOpsIntegral, IntegralAtomicTypes);
-    TYPED_TEST_CASE(AtomicOpsPointer, PointerAtomicTypes);
+    TYPED_TEST_SUITE(AtomicOps, AllAtomicTypes);
+    TYPED_TEST_SUITE(AtomicOpsIntegral, IntegralAtomicTypes);
+    TYPED_TEST_SUITE(AtomicOpsPointer, PointerAtomicTypes);
 
     TYPED_TEST(AtomicOps, CompareExchangeStrong)
     {
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/Bitset.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/Bitset.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/Bitset.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/Bitset.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -340,11 +340,11 @@ namespace UnitTest
         return bitset1.to_string() + 'x' + bitset2.to_string();
     }
 
-    INSTANTIATE_TEST_CASE_P(Bitset, BitsetUnsignedLongTests, ::testing::ValuesIn(GenerateBitsetUnsignedLongTestCases()), GenerateBitsetUnsignedLongTestCaseName);
+    INSTANTIATE_TEST_SUITE_P(Bitset, BitsetUnsignedLongTests, ::testing::ValuesIn(GenerateBitsetUnsignedLongTestCases()), GenerateBitsetUnsignedLongTestCaseName);
 
-    INSTANTIATE_TEST_CASE_P(Bitset, BitsetUnsignedLongPairTests, ::testing::ValuesIn(GenerateBitsetUnsignedLongPairTestCases()), GenerateBitsetUnsignedLongPairTestCaseName);
+    INSTANTIATE_TEST_SUITE_P(Bitset, BitsetUnsignedLongPairTests, ::testing::ValuesIn(GenerateBitsetUnsignedLongPairTestCases()), GenerateBitsetUnsignedLongPairTestCaseName);
 
-    INSTANTIATE_TEST_CASE_P(Bitset, BitsetStdComparisonTests, ::testing::ValuesIn(GenerateBitsetUnsignedLongTestCases()), GenerateBitsetUnsignedLongTestCaseName);
+    INSTANTIATE_TEST_SUITE_P(Bitset, BitsetStdComparisonTests, ::testing::ValuesIn(GenerateBitsetUnsignedLongTestCases()), GenerateBitsetUnsignedLongTestCaseName);
 
     using namespace AZStd;
 
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/ChronoTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/ChronoTests.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/ChronoTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/ChronoTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -77,7 +77,7 @@ namespace UnitTest
         DurationExpectation<AZStd::chrono::minutes, 28, AZStd::ratio<60>>,
         DurationExpectation<AZStd::chrono::hours, 22, AZStd::ratio<3600>>
     >;
-    TYPED_TEST_CASE(DurationTypedTest, ChronoTestTypes);
+    TYPED_TEST_SUITE(DurationTypedTest, ChronoTestTypes);
 
 
     //////////////////////////////////////////////////////////////////////////
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/ConcurrentAllocators.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/ConcurrentAllocators.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/ConcurrentAllocators.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/ConcurrentAllocators.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -42,7 +42,7 @@ namespace UnitTest
     using AllocatorTypes = ::testing::Types<
         AZStd::static_pool_concurrent_allocator<NodeType, s_allocatorCapacity>
     >;
-    TYPED_TEST_CASE(ConcurrentAllocatorTestFixture, AllocatorTypes);
+    TYPED_TEST_SUITE(ConcurrentAllocatorTestFixture, AllocatorTypes);
 
     TYPED_TEST(ConcurrentAllocatorTestFixture, Name)
     {
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/FunctorsBind.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/FunctorsBind.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/FunctorsBind.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/FunctorsBind.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -1026,7 +1026,7 @@ namespace UnitTest
         FunctionTestInternal::Functor<1>,
         FunctionTestInternal::Functor<sizeof(AZStd::Internal::function_util::function_buffer) + 8>
     >;
-    TYPED_TEST_CASE(FunctionFunctorTestFixture, FunctionFunctorTypes);
+    TYPED_TEST_SUITE(FunctionFunctorTestFixture, FunctionFunctorTypes);
 
 
 
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/Hashed.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/Hashed.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/Hashed.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/Hashed.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -1186,7 +1186,7 @@ namespace UnitTest
         , HashedSetConfig<AZStd::unordered_set<MoveOnlyIntType, MoveOnlyIntTypeHasher>>
         , HashedSetConfig<AZStd::unordered_multiset<MoveOnlyIntType, MoveOnlyIntTypeHasher>>
     >;
-    TYPED_TEST_CASE(HashedSetContainers, SetContainerConfigs);
+    TYPED_TEST_SUITE(HashedSetContainers, SetContainerConfigs);
 
     TYPED_TEST(HashedSetContainers, ExtractNodeHandleByKeySucceeds)
     {
@@ -1366,7 +1366,7 @@ namespace UnitTest
         HashedSetWithCustomAllocatorConfig<AZStd::unordered_set>
         , HashedSetWithCustomAllocatorConfig<AZStd::unordered_multiset>
         >;
-    TYPED_TEST_CASE(HashedSetDifferentAllocatorFixture, SetTemplateConfigs);
+    TYPED_TEST_SUITE(HashedSetDifferentAllocatorFixture, SetTemplateConfigs);
 
 #if GTEST_OS_SUPPORTS_DEATH_TEST
     TYPED_TEST(HashedSetDifferentAllocatorFixture, InsertNodeHandleWithDifferentAllocatorsLogsTraceMessages)
@@ -1423,7 +1423,7 @@ namespace UnitTest
         , HashedMapConfig<AZStd::unordered_map<MoveOnlyIntType, int32_t, MoveOnlyIntTypeHasher>>
         , HashedMapConfig<AZStd::unordered_multimap<MoveOnlyIntType, int32_t, MoveOnlyIntTypeHasher>>
     >;
-    TYPED_TEST_CASE(HashedMapContainers, MapContainerConfigs);
+    TYPED_TEST_SUITE(HashedMapContainers, MapContainerConfigs);
 
     TYPED_TEST(HashedMapContainers, ExtractNodeHandleByKeySucceeds)
     {
@@ -1764,7 +1764,7 @@ namespace UnitTest
         HashedMapWithCustomAllocatorConfig<AZStd::unordered_map>
         , HashedMapWithCustomAllocatorConfig<AZStd::unordered_multimap>
     >;
-    TYPED_TEST_CASE(HashedMapDifferentAllocatorFixture, MapTemplateConfigs);
+    TYPED_TEST_SUITE(HashedMapDifferentAllocatorFixture, MapTemplateConfigs);
 
 #if GTEST_OS_SUPPORTS_DEATH_TEST
     TYPED_TEST(HashedMapDifferentAllocatorFixture, InsertNodeHandleWithDifferentAllocatorsLogsTraceMessages)
@@ -1894,7 +1894,7 @@ namespace UnitTest
         >
     >;
 
-    TYPED_TEST_CASE(HashedContainerTransparentFixture, HashedContainerConfigs);
+    TYPED_TEST_SUITE(HashedContainerTransparentFixture, HashedContainerConfigs);
 
     TYPED_TEST(HashedContainerTransparentFixture, FindDoesNotConstructKeyForTransparentHashEqual_NoKeyConstructed_Succeeds)
     {
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/Ordered.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/Ordered.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/Ordered.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/Ordered.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -917,7 +917,7 @@ namespace UnitTest
         , TreeSetConfig<AZStd::set<MoveOnlyIntType, MoveOnlyIntTypeCompare>>
         , TreeSetConfig<AZStd::multiset<MoveOnlyIntType, MoveOnlyIntTypeCompare>>
     >;
-    TYPED_TEST_CASE(TreeSetContainers, SetContainerConfigs);
+    TYPED_TEST_SUITE(TreeSetContainers, SetContainerConfigs);
 
     TYPED_TEST(TreeSetContainers, ExtractNodeHandleByKeySucceeds)
     {
@@ -1097,7 +1097,7 @@ namespace UnitTest
         TreeSetWithCustomAllocatorConfig<AZStd::set>
         , TreeSetWithCustomAllocatorConfig<AZStd::multiset>
     >;
-    TYPED_TEST_CASE(TreeSetDifferentAllocatorFixture, SetTemplateConfigs);
+    TYPED_TEST_SUITE(TreeSetDifferentAllocatorFixture, SetTemplateConfigs);
 
 #if GTEST_OS_SUPPORTS_DEATH_TEST
     TYPED_TEST(TreeSetDifferentAllocatorFixture, InsertNodeHandleWithDifferentAllocatorsLogsTraceMessages)
@@ -1184,7 +1184,7 @@ namespace UnitTest
         , TreeMapConfig<AZStd::map<MoveOnlyIntType, int32_t, MoveOnlyIntTypeCompare>>
         , TreeMapConfig<AZStd::multimap<MoveOnlyIntType, int32_t, MoveOnlyIntTypeCompare>>
     >;
-    TYPED_TEST_CASE(TreeMapContainers, MapContainerConfigs);
+    TYPED_TEST_SUITE(TreeMapContainers, MapContainerConfigs);
 
     TYPED_TEST(TreeMapContainers, ExtractNodeHandleByKeySucceeds)
     {
@@ -1518,7 +1518,7 @@ namespace UnitTest
         TreeMapWithCustomAllocatorConfig<AZStd::map>
         , TreeMapWithCustomAllocatorConfig<AZStd::multimap>
     >;
-    TYPED_TEST_CASE(TreeMapDifferentAllocatorFixture, MapTemplateConfigs);
+    TYPED_TEST_SUITE(TreeMapDifferentAllocatorFixture, MapTemplateConfigs);
 
 #if GTEST_OS_SUPPORTS_DEATH_TEST
     TYPED_TEST(TreeMapDifferentAllocatorFixture, InsertNodeHandleWithDifferentAllocatorsLogsTraceMessages)
@@ -1644,7 +1644,7 @@ namespace UnitTest
         , TreeContainerTransparentConfig<AZStd::multimap<TreeContainerTransparentTestInternal::TrackConstructorCalls, int, AZStd::less<>>>
     >;
 
-    TYPED_TEST_CASE(TreeContainerTransparentFixture, TreeContainerConfigs);
+    TYPED_TEST_SUITE(TreeContainerTransparentFixture, TreeContainerConfigs);
 
     TYPED_TEST(TreeContainerTransparentFixture, FindDoesNotConstructKeyForTransparentHashEqual_NoKeyConstructed_Succeeds)
     {
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/Pair.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/Pair.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/Pair.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/Pair.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -80,7 +80,7 @@ namespace UnitTest
         , CompressedPairTestConfig<int32_t, CompressedPairInternal::EmptyStruct, 4>
         , CompressedPairTestConfig<int32_t, int32_t, 8>
     >;
-    TYPED_TEST_CASE(CompressedPairTest, CompressedPairTestConfigs);
+    TYPED_TEST_SUITE(CompressedPairTest, CompressedPairTestConfigs);
 
     using CompressedPairSizeTestConfigs = ::testing::Types<
         CompressedPairTestConfig<CompressedPairInternal::EmptyStruct, CompressedPairInternal::FinalEmptyStruct, 1>
@@ -95,7 +95,7 @@ namespace UnitTest
         , CompressedPairTestConfig<CompressedPairInternal::DerivedWithDataFromEmptyStruct, CompressedPairInternal::DerivedWithDataFromEmptyStruct, 8>
         , CompressedPairTestConfig<int32_t, int32_t, 8>
     >;
-    TYPED_TEST_CASE(CompressedPairSizeTest, CompressedPairSizeTestConfigs);
+    TYPED_TEST_SUITE(CompressedPairSizeTest, CompressedPairSizeTestConfigs);
 
     TYPED_TEST(CompressedPairTest, CompressedPairDefaultConstructorSucceeds)
     {
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/String.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/String.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/String.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/String.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -1525,7 +1525,7 @@ namespace UnitTest
     {};
 
     using StringViewElementTypes = ::testing::Types<char, wchar_t>;
-    TYPED_TEST_CASE(BasicStringViewConstexprFixture, StringViewElementTypes);
+    TYPED_TEST_SUITE(BasicStringViewConstexprFixture, StringViewElementTypes);
     TYPED_TEST(BasicStringViewConstexprFixture, StringView_DefaultConstructorsIsConstexpr)
     {
         constexpr basic_string_view<TypeParam> defaultView1;
@@ -2394,7 +2394,7 @@ namespace UnitTest
         : public ScopedAllocatorSetupFixture
     {};
     using StringTypesToTest = ::testing::Types<AZStd::string_view, AZStd::string, AZStd::fixed_string<1024>>;
-    TYPED_TEST_CASE(ImmutableStringFunctionsFixture, StringTypesToTest);
+    TYPED_TEST_SUITE(ImmutableStringFunctionsFixture, StringTypesToTest);
 
     TYPED_TEST(ImmutableStringFunctionsFixture, Contains_Succeeds)
     {
@@ -2429,7 +2429,7 @@ namespace UnitTest
     };
 
     using StringFormatTypesToTest = ::testing::Types<AZStd::string>; //, AZStd::wstring>;
-    TYPED_TEST_CASE(StringFormatFixture, StringFormatTypesToTest);
+    TYPED_TEST_SUITE(StringFormatFixture, StringFormatTypesToTest);
 
     TYPED_TEST(StringFormatFixture, CanFormatStringLongerThan2048Chars)
     {
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/Tuple.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/Tuple.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/Tuple.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/Tuple.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -89,7 +89,7 @@ namespace UnitTest
         AZStd::tuple<int, float, int>,
         AZStd::tuple<bool, bool, bool, bool>
     >;
-    TYPED_TEST_CASE(TupleTypedTest, TupleTestTypes);
+    TYPED_TEST_SUITE(TupleTypedTest, TupleTestTypes);
 
 
     //////////////////////////////////////////////////////////////////////////
diff -up o3de/Code/Framework/AzCore/Tests/AZStd/Variant.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/AZStd/Variant.cpp
--- o3de/Code/Framework/AzCore/Tests/AZStd/Variant.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/AZStd/Variant.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -61,7 +61,7 @@ namespace UnitTest
         , VariantSizeTestConfig<AZStd::variant<void*, const void*>, 2>
         , VariantSizeTestConfig<AZStd::variant<uint64_t, AZStd::string, uint64_t, double>, 4>
     >;
-    TYPED_TEST_CASE(VariantSizeTest, VariantSizeTestConfigs);
+    TYPED_TEST_SUITE(VariantSizeTest, VariantSizeTestConfigs);
 
     template<typename TestConfig>
     class VariantAlternativeTest
@@ -95,7 +95,7 @@ namespace UnitTest
         , VariantAlternativeTestConfig<Variant6AltType, 4, int32_t>
         , VariantAlternativeTestConfig<Variant6AltType, 5, uintptr_t>
     >;
-    TYPED_TEST_CASE(VariantAlternativeTest, VariantAlternativeTestConfigs);
+    TYPED_TEST_SUITE(VariantAlternativeTest, VariantAlternativeTestConfigs);
 
     namespace VariantTestInternal
     {
diff -up o3de/Code/Framework/AzCore/Tests/Console/ConsoleTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Console/ConsoleTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Console/ConsoleTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Console/ConsoleTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -583,7 +583,7 @@ namespace ConsoleSettingsRegistryTests
             ]
         )";
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         ExecuteCommandFromSettingsFile,
         ConsoleSettingsRegistryFixture,
         ::testing::Values(
diff -up o3de/Code/Framework/AzCore/Tests/EBus.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/EBus.cpp
--- o3de/Code/Framework/AzCore/Tests/EBus.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/EBus.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -557,14 +557,14 @@ namespace UnitTest
         AZStd::unordered_map<int, AZStd::vector<Handler*>> m_handlers;
         int m_numHandlers = 0;
     };
-    TYPED_TEST_CASE(EBusTestAll, BusTypesAll);
+    TYPED_TEST_SUITE(EBusTestAll, BusTypesAll);
 
     template <typename Bus>
     class EBusTestId
         : public EBusTestAll<Bus>
     {
     };
-    TYPED_TEST_CASE(EBusTestId, BusTypesId);
+    TYPED_TEST_SUITE(EBusTestId, BusTypesId);
 
     using BusTypesIdMultiHandlers = ::testing::Types<
         ManyToMany, ManyToManyOrdered,
@@ -574,7 +574,7 @@ namespace UnitTest
         : public EBusTestAll<Bus>
     {
     };
-    TYPED_TEST_CASE(EBusTestIdMultiHandlers, BusTypesIdMultiHandlers);
+    TYPED_TEST_SUITE(EBusTestIdMultiHandlers, BusTypesIdMultiHandlers);
 
     //////////////////////////////////////////////////////////////////////////
     // Non-event functions
diff -up o3de/Code/Framework/AzCore/Tests/FixedWidthIntegers.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/FixedWidthIntegers.cpp
--- o3de/Code/Framework/AzCore/Tests/FixedWidthIntegers.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/FixedWidthIntegers.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -449,7 +449,7 @@ namespace UnitTest
         AZ::s8, AZ::u8, AZ::s16, AZ::u16, AZ::s32, AZ::u32, AZ::s64, AZ::u64
     >;
 
-    TYPED_TEST_CASE(IntegralTypeTestFixture, IntegralTypeTestConfigs);
+    TYPED_TEST_SUITE(IntegralTypeTestFixture, IntegralTypeTestConfigs);
 
     ///////////////////////////////////////////////////////////////////////////
 
diff -up o3de/Code/Framework/AzCore/Tests/IO/Path/PathTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/IO/Path/PathTests.cpp
--- o3de/Code/Framework/AzCore/Tests/IO/Path/PathTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/IO/Path/PathTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -143,7 +143,7 @@ namespace UnitTest
         EXPECT_EQ(path2, pathView2);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         ComparePaths,
         PathParamFixture,
         ::testing::Values(
@@ -178,7 +178,7 @@ namespace UnitTest
         EXPECT_EQ(path1, path2);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         CompareWindowsPaths,
         WindowsPathCompareParamFixture,
         ::testing::Values(
@@ -200,7 +200,7 @@ namespace UnitTest
         EXPECT_TRUE(testPath.IsRelative());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         RelativePaths,
         WindowsPathRelativeParamFixture,
         ::testing::Values(
@@ -229,7 +229,7 @@ namespace UnitTest
         EXPECT_TRUE(testPath.IsAbsolute());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         AbsolutePaths,
         WindowsPathAbsoluteParamFixture,
         ::testing::Values(
@@ -258,7 +258,7 @@ namespace UnitTest
         EXPECT_TRUE(testPath.IsRelative());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         RelativePaths,
         PosixPathRelativeParamFixture,
         ::testing::Values(
@@ -288,7 +288,7 @@ namespace UnitTest
         EXPECT_TRUE(testPath.IsAbsolute());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         AbsolutePaths,
         PosixPathAbsoluteParamFixture,
         ::testing::Values(
@@ -330,7 +330,7 @@ namespace UnitTest
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         AppendPaths,
         PathAppendTest,
         ::testing::Values(
@@ -361,7 +361,7 @@ namespace UnitTest
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         AppendPaths,
         WindowsPathAppendTest,
         ::testing::Values(
@@ -413,7 +413,7 @@ namespace UnitTest
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         AppendPaths,
         PosixPathAppendTest,
         ::testing::Values(
@@ -483,7 +483,7 @@ namespace UnitTest
 
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathIterator,
         PathIteratorFixture,
         ::testing::Values(
@@ -540,7 +540,7 @@ namespace UnitTest
         EXPECT_STREQ(testParams.m_expectedResult, resultPath.c_str());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathLexicallyNormal,
         PathLexicallyNormalFixture,
         ::testing::Values(
@@ -561,7 +561,7 @@ namespace UnitTest
         EXPECT_STREQ(testParams.m_expectedResult, testPath.c_str());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathLexicallyRelative,
         PathLexicallyRelativeFixture,
         ::testing::Values(
@@ -601,7 +601,7 @@ namespace UnitTest
         EXPECT_EQ(testParams.m_expectedIsRelativeTo, testPath.IsRelativeTo(AZ::IO::PathView{ testParams.m_testBasePath, testParams.m_preferredSeparator }));
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathLexicallyProximate,
         PathViewLexicallyProximateFixture,
         ::testing::Values(
@@ -635,7 +635,7 @@ namespace UnitTest
         EXPECT_EQ(testParams.m_expectedMatch, testPath.Match(testParams.m_testPattern));
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathMatch,
         PathViewMatchFixture,
         ::testing::Values(
@@ -663,7 +663,7 @@ namespace UnitTest
         EXPECT_STREQ(testParams.m_expectedResult, testPath.c_str());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathMakePreferred,
         PathMakePreferredFixture,
         ::testing::Values(
@@ -693,7 +693,7 @@ namespace UnitTest
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         ReplaceFilenames,
         PathReplaceFilenameTest,
         ::testing::Values(
@@ -720,7 +720,7 @@ namespace UnitTest
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         RemoveFilenames,
         PathRemoveFilenameTest,
         ::testing::Values(
@@ -745,7 +745,7 @@ namespace UnitTest
         EXPECT_EQ(testParams.m_expectedResult, prefixIter == testPath.end());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathPrefix,
         PathPrefixFixture,
         ::testing::Values(
@@ -795,7 +795,7 @@ namespace UnitTest
         EXPECT_EQ(testParams.m_expectedExtension, testPath.Extension());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathExtractComponents,
         PathDecompositionFixture,
         ::testing::Values(
diff -up o3de/Code/Framework/AzCore/Tests/Math/FrustumTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Math/FrustumTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Math/FrustumTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Math/FrustumTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -658,7 +658,7 @@ namespace UnitTest
         return testCaseName;
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         MATH_Frustum, Tests, ::testing::ValuesIn(GenerateFrustumIntersectionTestCases()),
         GenerateFrustumIntersectionTestCaseName);
 
diff -up o3de/Code/Framework/AzCore/Tests/Math/Matrix3x4Tests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Math/Matrix3x4Tests.cpp
--- o3de/Code/Framework/AzCore/Tests/Math/Matrix3x4Tests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Math/Matrix3x4Tests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -50,7 +50,7 @@ namespace UnitTest
         EXPECT_THAT(matrix * vector, IsClose(vector + translation));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4CreateFixture, ::testing::ValuesIn(MathTestData::Vector3s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4CreateFixture, ::testing::ValuesIn(MathTestData::Vector3s));
 
     TEST(MATH_Matrix3x4, CreateFromValue)
     {
@@ -175,7 +175,7 @@ namespace UnitTest
         EXPECT_NEAR(projectedDotProduct, projectedMagnitudeSq * cosf(angle), 1e-3f);
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4CreateRotationFixture, ::testing::ValuesIn(MathTestData::Angles));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4CreateRotationFixture, ::testing::ValuesIn(MathTestData::Angles));
 
     TEST(MATH_Matrix3x4, CreateFromRows)
     {
@@ -371,7 +371,7 @@ namespace UnitTest
         EXPECT_THAT(matrix * vector, IsClose(quaternion.TransformVector(vector)));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4CreateFromQuaternionFixture, ::testing::ValuesIn(MathTestData::UnitQuaternions));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4CreateFromQuaternionFixture, ::testing::ValuesIn(MathTestData::UnitQuaternions));
 
     using Matrix3x4CreateFromMatrix3x3Fixture = ::testing::TestWithParam<AZ::Matrix3x3>;
 
@@ -394,7 +394,7 @@ namespace UnitTest
         EXPECT_THAT(matrix3x4 * vector, IsClose(matrix3x3 * vector + translation));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4CreateFromMatrix3x3Fixture, ::testing::ValuesIn(MathTestData::Matrix3x3s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4CreateFromMatrix3x3Fixture, ::testing::ValuesIn(MathTestData::Matrix3x3s));
 
     TEST(MATH_Matrix3x4, CreateScale)
     {
@@ -444,7 +444,7 @@ namespace UnitTest
         EXPECT_THAT(forward, IsClose(expectedForward.GetNormalized()));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4CreateLookAtFixture, ::testing::ValuesIn(MathTestData::Axes));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4CreateLookAtFixture, ::testing::ValuesIn(MathTestData::Axes));
 
     TEST(MATH_Matrix3x4, CreateLookAtDegenerateCases)
     {
@@ -679,7 +679,7 @@ namespace UnitTest
         EXPECT_THAT(transpose.GetColumn(2), IsClose(matrix.GetRowAsVector3(2)));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4TransposeFixture, ::testing::ValuesIn(MathTestData::NonOrthogonalMatrix3x4s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4TransposeFixture, ::testing::ValuesIn(MathTestData::NonOrthogonalMatrix3x4s));
 
     using Matrix3x4InvertFullFixture = ::testing::TestWithParam<AZ::Matrix3x4>;
 
@@ -704,7 +704,7 @@ namespace UnitTest
         EXPECT_TRUE((inverse * matrix).IsClose(AZ::Matrix3x4::Identity()));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4InvertFullFixture, ::testing::ValuesIn(MathTestData::NonOrthogonalMatrix3x4s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4InvertFullFixture, ::testing::ValuesIn(MathTestData::NonOrthogonalMatrix3x4s));
 
 #if AZ_TRAIT_DISABLE_FAILED_MATH_TESTS
     TEST(MATH_Matrix3x4, DISABLED_GetInverseFullSingularMatrix)
@@ -748,7 +748,7 @@ namespace UnitTest
         EXPECT_TRUE(inverseFast.IsClose(inverseFull));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4InvertFastFixture, ::testing::ValuesIn(MathTestData::OrthogonalMatrix3x4s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4InvertFastFixture, ::testing::ValuesIn(MathTestData::OrthogonalMatrix3x4s));
 
     using Matrix3x4ScaleFixture = ::testing::TestWithParam<AZ::Matrix3x4>;
 
@@ -795,7 +795,7 @@ namespace UnitTest
         EXPECT_THAT(scaledMatrix.GetReciprocalScaled(), IsClose(reciprocalScaledMatrix));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4ScaleFixture, ::testing::ValuesIn(MathTestData::OrthogonalMatrix3x4s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4ScaleFixture, ::testing::ValuesIn(MathTestData::OrthogonalMatrix3x4s));
 
     TEST(MATH_Matrix3x4, IsOrthogonal)
     {
@@ -910,7 +910,7 @@ namespace UnitTest
         EXPECT_TRUE(matrix.IsClose(rotX * rotY * rotZ));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4SetFromEulerDegreesFixture, ::testing::ValuesIn(MathTestData::EulerAnglesDegrees));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4SetFromEulerDegreesFixture, ::testing::ValuesIn(MathTestData::EulerAnglesDegrees));
 
     using Matrix3x4SetFromEulerRadiansFixture = ::testing::TestWithParam<AZ::Vector3>;
 
@@ -925,7 +925,7 @@ namespace UnitTest
         EXPECT_TRUE(matrix.IsClose(rotX * rotY * rotZ));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4SetFromEulerRadiansFixture, ::testing::ValuesIn(MathTestData::EulerAnglesRadians));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4SetFromEulerRadiansFixture, ::testing::ValuesIn(MathTestData::EulerAnglesRadians));
 
     using Matrix3x4GetEulerFixture = ::testing::TestWithParam<AZ::Matrix3x4>;
 
@@ -946,7 +946,7 @@ namespace UnitTest
         EXPECT_TRUE(eulerMatrix.IsClose(matrix));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4GetEulerFixture, ::testing::ValuesIn(MathTestData::OrthogonalMatrix3x4s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4GetEulerFixture, ::testing::ValuesIn(MathTestData::OrthogonalMatrix3x4s));
 
     using Matrix3x4GetDeterminantFixture = ::testing::TestWithParam<AZ::Matrix3x4>;
 
@@ -956,7 +956,7 @@ namespace UnitTest
         EXPECT_NEAR(matrix.GetDeterminant3x3(), 1.0f, 1e-3f);
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Matrix3x4, Matrix3x4GetDeterminantFixture, ::testing::ValuesIn(MathTestData::OrthogonalMatrix3x4s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Matrix3x4, Matrix3x4GetDeterminantFixture, ::testing::ValuesIn(MathTestData::OrthogonalMatrix3x4s));
 
     TEST(MATH_Matrix3x4, GetDeterminantOfArbitraryMatrices)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Math/QuaternionTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Math/QuaternionTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Math/QuaternionTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Math/QuaternionTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -358,7 +358,7 @@ namespace UnitTest
         EXPECT_TRUE(recoveredQuaternion1.IsClose(recoveredQuaternion2) || recoveredQuaternion1.IsClose(-recoveredQuaternion2));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Quaternion, QuaternionEulerFixture, ::testing::ValuesIn(TestUnitQuaternions));
+    INSTANTIATE_TEST_SUITE_P(MATH_Quaternion, QuaternionEulerFixture, ::testing::ValuesIn(TestUnitQuaternions));
 
     TEST(MATH_Quaternion, FromEulerDegrees)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Math/TransformTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Math/TransformTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Math/TransformTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Math/TransformTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -45,7 +45,7 @@ namespace UnitTest
         EXPECT_THAT(transform.TransformPoint(vector), IsClose(vector + translation));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformCreateFixture, ::testing::ValuesIn(MathTestData::Vector3s));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformCreateFixture, ::testing::ValuesIn(MathTestData::Vector3s));
 
     using TransformCreateRotationFixture = ::testing::TestWithParam<float>;
 
@@ -112,7 +112,7 @@ namespace UnitTest
         EXPECT_NEAR(projectedDotProduct, projectedMagnitudeSq * cosf(angle), 1e-2f * projectedMagnitudeSq);
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformCreateRotationFixture, ::testing::ValuesIn(MathTestData::Angles));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformCreateRotationFixture, ::testing::ValuesIn(MathTestData::Angles));
 
     TEST(MATH_Transform, GetSetTranslation)
     {
@@ -157,7 +157,7 @@ namespace UnitTest
         EXPECT_THAT(transform.TransformPoint(vector), IsClose(quaternion.TransformVector(vector)));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformCreateFromQuaternionFixture, ::testing::ValuesIn(MathTestData::UnitQuaternions));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformCreateFromQuaternionFixture, ::testing::ValuesIn(MathTestData::UnitQuaternions));
 
     TEST(MATH_Transform, CreateUniformScale)
     {
@@ -188,7 +188,7 @@ namespace UnitTest
         EXPECT_THAT(forward, IsClose(expectedForward.GetNormalized()));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformCreateLookAtFixture, ::testing::ValuesIn(MathTestData::Axes));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformCreateLookAtFixture, ::testing::ValuesIn(MathTestData::Axes));
 
     TEST(MATH_Transform, CreateLookAtDegenerateCases)
     {
@@ -307,7 +307,7 @@ namespace UnitTest
         EXPECT_TRUE((inverse * transform).IsClose(AZ::Transform::Identity()));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformInvertFixture, ::testing::ValuesIn(MathTestData::OrthogonalTransforms));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformInvertFixture, ::testing::ValuesIn(MathTestData::OrthogonalTransforms));
 
     using TransformScaleFixture = ::testing::TestWithParam<AZ::Transform>;
 
@@ -324,7 +324,7 @@ namespace UnitTest
         EXPECT_NEAR(scaledTransform.GetUniformScale(), scale, AZ::Constants::Tolerance);
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformScaleFixture, ::testing::ValuesIn(MathTestData::OrthogonalTransforms));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformScaleFixture, ::testing::ValuesIn(MathTestData::OrthogonalTransforms));
 
     TEST(MATH_Transform, IsOrthogonal)
     {
@@ -353,7 +353,7 @@ namespace UnitTest
         EXPECT_TRUE(transform.IsClose(rotX * rotY * rotZ));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformSetFromEulerDegreesFixture, ::testing::ValuesIn(MathTestData::EulerAnglesDegrees));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformSetFromEulerDegreesFixture, ::testing::ValuesIn(MathTestData::EulerAnglesDegrees));
 
     using TransformSetFromEulerRadiansFixture = ::testing::TestWithParam<AZ::Vector3>;
 
@@ -368,7 +368,7 @@ namespace UnitTest
         EXPECT_TRUE(transform.IsClose(rotX * rotY * rotZ));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformSetFromEulerRadiansFixture, ::testing::ValuesIn(MathTestData::EulerAnglesRadians));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformSetFromEulerRadiansFixture, ::testing::ValuesIn(MathTestData::EulerAnglesRadians));
 
     using TransformGetEulerFixture = ::testing::TestWithParam<AZ::Transform>;
 
@@ -389,7 +389,7 @@ namespace UnitTest
         EXPECT_TRUE(eulerTransform.IsClose(transform));
     }
 
-    INSTANTIATE_TEST_CASE_P(MATH_Transform, TransformGetEulerFixture, ::testing::ValuesIn(MathTestData::OrthogonalTransforms));
+    INSTANTIATE_TEST_SUITE_P(MATH_Transform, TransformGetEulerFixture, ::testing::ValuesIn(MathTestData::OrthogonalTransforms));
 
     class MATH_TransformApplicationFixture
         : public AllocatorsFixture
diff -up o3de/Code/Framework/AzCore/Tests/Memory/HphaSchema.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Memory/HphaSchema.cpp
--- o3de/Code/Framework/AzCore/Tests/Memory/HphaSchema.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Memory/HphaSchema.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -96,7 +96,7 @@ namespace UnitTest
          HphaSchemaTestParameters(s_smallAllocationSizes, 2),
          HphaSchemaTestParameters(s_smallAllocationSizes, 100)
     };
-    INSTANTIATE_TEST_CASE_P(Small,
+    INSTANTIATE_TEST_SUITE_P(Small,
         HphaSchemaTestFixture,
         ::testing::ValuesIn(s_smallInstancesParameters));
 
@@ -104,7 +104,7 @@ namespace UnitTest
          HphaSchemaTestParameters(s_bigAllocationSizes, 2),
          HphaSchemaTestParameters(s_bigAllocationSizes, 100)
     };
-    INSTANTIATE_TEST_CASE_P(Big,
+    INSTANTIATE_TEST_SUITE_P(Big,
         HphaSchemaTestFixture,
         ::testing::ValuesIn(s_bigInstancesParameters));
 
@@ -112,7 +112,7 @@ namespace UnitTest
          HphaSchemaTestParameters(s_mixedAllocationSizes, 2),
          HphaSchemaTestParameters(s_mixedAllocationSizes, 100)
     };
-    INSTANTIATE_TEST_CASE_P(Mixed,
+    INSTANTIATE_TEST_SUITE_P(Mixed,
         HphaSchemaTestFixture,
         ::testing::ValuesIn(s_mixedInstancesParameters));
 }
diff -up o3de/Code/Framework/AzCore/Tests/Memory/LeakDetection.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Memory/LeakDetection.cpp
--- o3de/Code/Framework/AzCore/Tests/Memory/LeakDetection.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Memory/LeakDetection.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -368,7 +368,7 @@ namespace UnitTest
         AZ::PoolAllocator,
         AZ::ThreadPoolAllocator
     >;
-    TYPED_TEST_CASE(AllocatorTypeLeakDetectionTest, AllocatorTypes);
+    TYPED_TEST_SUITE(AllocatorTypeLeakDetectionTest, AllocatorTypes);
 
 #if AZ_TRAIT_DISABLE_FAILED_ALLOCATOR_LEAK_DETECTION_TESTS
     TYPED_TEST(AllocatorTypeLeakDetectionTest, DISABLED_Leak)
diff -up o3de/Code/Framework/AzCore/Tests/Name/NameJsonSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Name/NameJsonSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Name/NameJsonSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Name/NameJsonSerializerTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -74,7 +74,7 @@ namespace JsonSerializationTests
     };
 
     using NameJsonSerializerTestTypes = ::testing::Types<NameJsonSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(NameJsonSerializer, JsonSerializerConformityTests, NameJsonSerializerTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(NameJsonSerializer, JsonSerializerConformityTests, NameJsonSerializerTestTypes);
 
     class NameJsonSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Platform/Windows/Tests/IO/Streamer/StorageDriveTests_Windows.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Platform/Windows/Tests/IO/Streamer/StorageDriveTests_Windows.cpp
--- o3de/Code/Framework/AzCore/Tests/Platform/Windows/Tests/IO/Streamer/StorageDriveTests_Windows.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Platform/Windows/Tests/IO/Streamer/StorageDriveTests_Windows.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -52,7 +52,7 @@ namespace AZ::IO
         }
     };
 
-    INSTANTIATE_TYPED_TEST_CASE_P(
+    INSTANTIATE_TYPED_TEST_SUITE_P(
         Streamer_StorageDriveWindowsConformityTests, StreamStackEntryConformityTests, StorageDriveWindowsTestDescription);
 
 
diff -up o3de/Code/Framework/AzCore/Tests/RTTI/TypeSafeIntegralTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/RTTI/TypeSafeIntegralTests.cpp
--- o3de/Code/Framework/AzCore/Tests/RTTI/TypeSafeIntegralTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/RTTI/TypeSafeIntegralTests.cpp	2021-06-24 23:31:23.929560677 +0000
@@ -34,7 +34,7 @@ namespace UnitTest
     };
 
     using IntegralTypes = ::testing::Types<TestInt8, TestInt16, TestInt32, TestInt64, TestUInt8, TestUInt16, TestUInt32, TestUInt64>;
-    TYPED_TEST_CASE(TypeSafeIntegralTests, IntegralTypes);
+    TYPED_TEST_SUITE(TypeSafeIntegralTests, IntegralTypes);
 
     TYPED_TEST(TypeSafeIntegralTests, TestSum)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Serialization.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -7725,7 +7725,7 @@ namespace UnitTest
         GenericsLoadInPlaceHolder<T> m_holder;
     };
 
-    TYPED_TEST_CASE_P(GenericsLoadInPlaceFixture);
+    TYPED_TEST_SUITE_P(GenericsLoadInPlaceFixture);
 
     TYPED_TEST_P(GenericsLoadInPlaceFixture, ClearsOnLoadInPlace)
     {
@@ -7765,7 +7765,7 @@ namespace UnitTest
         EXPECT_THAT(got.m_data, ::testing::ContainerEq(this->m_holder.m_data));
     }
 
-    REGISTER_TYPED_TEST_CASE_P(GenericsLoadInPlaceFixture, ClearsOnLoadInPlace);
+    REGISTER_TYPED_TEST_SUITE_P(GenericsLoadInPlaceFixture, ClearsOnLoadInPlace);
 
     // The test ClearsOnLoadInPlace is run once for each type in this list
     typedef ::testing::Types<
@@ -7776,7 +7776,7 @@ namespace UnitTest
         AZStd::unordered_set<int>,
         AZStd::unordered_multiset<int>
     > TypesThatShouldBeClearedWhenLoadedInPlace;
-    INSTANTIATE_TYPED_TEST_CASE_P(Clears, GenericsLoadInPlaceFixture, TypesThatShouldBeClearedWhenLoadedInPlace);
+    INSTANTIATE_TYPED_TEST_SUITE_P(Clears, GenericsLoadInPlaceFixture, TypesThatShouldBeClearedWhenLoadedInPlace);
 
     enum TestUnscopedSerializationEnum : int32_t
     {
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/ArraySerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/ArraySerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/ArraySerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/ArraySerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -322,7 +322,7 @@ namespace JsonSerializationTests
     };
 
     using ArraySerializerConformityTestTypes = ::testing::Types<SimpleArraySerializerTestDescription, ComplexArraySerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonArraySerializer, JsonSerializerConformityTests, ArraySerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonArraySerializer, JsonSerializerConformityTests, ArraySerializerConformityTestTypes);
 
     class JsonArraySerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/BasicContainerSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/BasicContainerSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/BasicContainerSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/BasicContainerSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -249,7 +249,7 @@ namespace JsonSerializationTests
         ComplextTestDescription<AZStd::vector<SimpleClass>>,
         ComplextTestDescription<AZStd::fixed_vector<SimpleClass, 256>>
     >;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonBasicContainers, JsonSerializerConformityTests, BasicContainerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonBasicContainers, JsonSerializerConformityTests, BasicContainerConformityTestTypes);
 
     class JsonBasicContainerSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/BoolSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/BoolSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/BoolSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/BoolSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -57,7 +57,7 @@ namespace JsonSerializationTests
     };
 
     using BoolSerializerConformityTestTypes = ::testing::Types<BoolSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonBoolSerializer, JsonSerializerConformityTests, BoolSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonBoolSerializer, JsonSerializerConformityTests, BoolSerializerConformityTestTypes);
 
     class JsonBoolSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/ByteStreamSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/ByteStreamSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/ByteStreamSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/ByteStreamSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -55,5 +55,5 @@ namespace JsonSerializationTests
     };
 
     using ByteStreamConformityTestTypes = ::testing::Types<ByteStreamSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonByteStreamSerialzier, JsonSerializerConformityTests, ByteStreamConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonByteStreamSerialzier, JsonSerializerConformityTests, ByteStreamConformityTestTypes);
 } // namespace JsonSerializationTests
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/ColorSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/ColorSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/ColorSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/ColorSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -68,7 +68,7 @@ namespace JsonSerializationTests
     };
 
     using ColorSerializerConformityTestTypes = ::testing::Types<ColorSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonColorSerializer, JsonSerializerConformityTests, ColorSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonColorSerializer, JsonSerializerConformityTests, ColorSerializerConformityTestTypes);
 
     class JsonColorSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/DoubleSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/DoubleSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/DoubleSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/DoubleSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -65,7 +65,7 @@ namespace JsonSerializationTests
         DoubleSerializerTestDescription<double, AZ::JsonDoubleSerializer>,
         DoubleSerializerTestDescription<float, AZ::JsonFloatSerializer>
     >;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonDoubleSerializer, JsonSerializerConformityTests, DoubleSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonDoubleSerializer, JsonSerializerConformityTests, DoubleSerializerConformityTestTypes);
 
     class JsonDoubleSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/IntSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/IntSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/IntSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/IntSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -77,7 +77,7 @@ namespace JsonSerializationTests
         IntegerSerializerTestDescription<unsigned long, AZ::JsonUnsignedLongSerializer>,
         IntegerSerializerTestDescription<unsigned long long, AZ::JsonUnsignedLongLongSerializer>
     >;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonIntSerializer, JsonSerializerConformityTests, IntegerSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonIntSerializer, JsonSerializerConformityTests, IntegerSerializerConformityTestTypes);
 
 
     template<typename> struct SerializerInfo {};
@@ -305,7 +305,7 @@ namespace JsonSerializationTests
         AZ::JsonUnsignedIntSerializer,
         AZ::JsonUnsignedLongSerializer,
         AZ::JsonUnsignedLongLongSerializer >;
-    TYPED_TEST_CASE(TypedJsonIntSerializerTests, IntSerializationTypes);
+    TYPED_TEST_SUITE(TypedJsonIntSerializerTests, IntSerializationTypes);
 
     TYPED_TEST(TypedJsonIntSerializerTests, Load_FalseBoolean_ValueIsZero)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/JsonSerializationTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/JsonSerializationTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/JsonSerializationTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/JsonSerializationTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -41,7 +41,7 @@ namespace JsonSerializationTests
         bool m_fullyReflected = true;
     };
 
-    TYPED_TEST_CASE(TypedJsonSerializationTests, JsonSerializationTestCases);
+    TYPED_TEST_SUITE(TypedJsonSerializationTests, JsonSerializationTestCases);
 
     TYPED_TEST(TypedJsonSerializationTests, Store_SerializedDefaultInstance_EmptyJsonReturned)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/JsonSerializerConformityTests.h.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/JsonSerializerConformityTests.h
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/JsonSerializerConformityTests.h.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/JsonSerializerConformityTests.h	2021-06-24 23:31:23.939560634 +0000
@@ -235,7 +235,7 @@ namespace JsonSerializationTests
         AZ_RTTI(IncorrectClass, "{E201252B-D653-4753-93AD-4F13C5FA2246}");
     };
 
-    TYPED_TEST_CASE_P(JsonSerializerConformityTests);
+    TYPED_TEST_SUITE_P(JsonSerializerConformityTests);
 
     TYPED_TEST_P(JsonSerializerConformityTests, Registration_SerializerIsRegisteredWithContext_SerializerFound)
     {
@@ -1031,7 +1031,7 @@ namespace JsonSerializationTests
         }
     }
 
-    REGISTER_TYPED_TEST_CASE_P(JsonSerializerConformityTests,
+    REGISTER_TYPED_TEST_SUITE_P(JsonSerializerConformityTests,
         Registration_SerializerIsRegisteredWithContext_SerializerFound,
 
         Load_InvalidTypeOfNullType_ReturnsUnsupported,
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/MapSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/MapSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/MapSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/MapSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -261,7 +261,7 @@ namespace JsonSerializationTests
         MapPointerTestDescription<AZStd::unordered_map, AZ::JsonUnorderedMapSerializer, false>,
         MapPointerTestDescription<AZStd::unordered_multimap, AZ::JsonUnorderedMultiMapSerializer, true>
     >;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonMapSerializer, JsonSerializerConformityTests, MapSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonMapSerializer, JsonSerializerConformityTests, MapSerializerConformityTestTypes);
 
 
     struct TestString
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/MathMatrixSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/MathMatrixSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/MathMatrixSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/MathMatrixSerializerTests.cpp	2021-06-24 23:35:45.338444428 +0000
@@ -262,7 +262,7 @@ namespace JsonSerializationTests
         MathMatrixSerializerTestDescription<AZ::Matrix3x4, 3, 4, AZ::JsonMatrix3x4Serializer>,
         MathMatrixSerializerTestDescription<AZ::Matrix4x4, 4, 4, AZ::JsonMatrix4x4Serializer>
     >;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonMathMatrixSerializer, JsonSerializerConformityTests, MathMatrixSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonMathMatrixSerializer, JsonSerializerConformityTests, MathMatrixSerializerConformityTestTypes);
 
     template<typename T>
     class JsonMathMatrixSerializerTests
@@ -319,7 +319,7 @@ namespace JsonSerializationTests
 
     using JsonMathMatrixSerializerTypes = ::testing::Types <
         Matrix3x3Descriptor, Matrix3x4Descriptor, Matrix4x4Descriptor>;
-    TYPED_TEST_CASE(JsonMathMatrixSerializerTests, JsonMathMatrixSerializerTypes);
+    TYPED_TEST_SUITE(JsonMathMatrixSerializerTests, JsonMathMatrixSerializerTypes);
 
     // Load array tests
 
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/MathVectorSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/MathVectorSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/MathVectorSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/MathVectorSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -94,7 +94,7 @@ namespace JsonSerializationTests
         MathVectorSerializerTestDescription<AZ::Vector3, 3, AZ::JsonVector3Serializer>,
         MathVectorSerializerTestDescription<AZ::Vector4, 4, AZ::JsonVector4Serializer>
     >;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonMathVectorSerializer, JsonSerializerConformityTests, MathVectorSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonMathVectorSerializer, JsonSerializerConformityTests, MathVectorSerializerConformityTestTypes);
 
     template<typename T>
     class JsonMathVectorSerializerTests
@@ -152,7 +152,7 @@ namespace JsonSerializationTests
 
     using JsonMathVectorSerializerTypes = ::testing::Types <
         Vector2Descriptor, Vector3Descriptor, Vector4Descriptor>;
-    TYPED_TEST_CASE(JsonMathVectorSerializerTests, JsonMathVectorSerializerTypes);
+    TYPED_TEST_SUITE(JsonMathVectorSerializerTests, JsonMathVectorSerializerTypes);
 
     // Load array tests
 
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/SmartPointerSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/SmartPointerSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/SmartPointerSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/SmartPointerSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -464,7 +464,7 @@ namespace JsonSerializationTests
         SmartPointerComplexDerivedClassWithDerivedInstanceTestDescription<AZStd::intrusive_ptr>
     >;
 
-    INSTANTIATE_TYPED_TEST_CASE_P(SmartPointerSerializer, JsonSerializerConformityTests, SmartPointerSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(SmartPointerSerializer, JsonSerializerConformityTests, SmartPointerSerializerConformityTestTypes);
 
     struct SimpleInheritenceAlt : BaseClass
     {
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/StringSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/StringSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/StringSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/StringSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -62,7 +62,7 @@ namespace JsonSerializationTests
         StringTestDescription<AZStd::string, AZ::JsonStringSerializer>,
         StringTestDescription<AZ::OSString, AZ::JsonOSStringSerializer>
     >;
-    INSTANTIATE_TYPED_TEST_CASE_P(String, JsonSerializerConformityTests, StringConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(String, JsonSerializerConformityTests, StringConformityTestTypes);
 
     template<typename> struct SerializerInfo {};
 
@@ -102,7 +102,7 @@ namespace JsonSerializationTests
     using StringSerializationTypes = ::testing::Types<
         AZ::JsonStringSerializer,
         AZ::JsonOSStringSerializer >;
-    TYPED_TEST_CASE(TypedJsonStringSerializerTests, StringSerializationTypes);
+    TYPED_TEST_SUITE(TypedJsonStringSerializerTests, StringSerializationTypes);
 
     TYPED_TEST(TypedJsonStringSerializerTests, Load_FalseBoolean_FalseAsString)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/TestCases_Enum.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/TestCases_Enum.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/TestCases_Enum.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/TestCases_Enum.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -162,7 +162,7 @@ namespace JsonSerializationTests
         ScopedEnumBitFlagsU64,
         ScopedEnumBitFlagsNoZero
     >;
-    TYPED_TEST_CASE(TypedJsonEnumSerializationTests, EnumTypes);
+    TYPED_TEST_SUITE(TypedJsonEnumSerializationTests, EnumTypes);
 
     TYPED_TEST(TypedJsonEnumSerializationTests, Load_EmptyInstanceOfArrayType_ReturnsDefault)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/TransformSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/TransformSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/TransformSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/TransformSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -67,7 +67,7 @@ namespace JsonSerializationTests
     };
 
     using JsonTransformSerializerConformityTestTypes = ::testing::Types<JsonTransformSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonTransformSerializer, JsonSerializerConformityTests, JsonTransformSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonTransformSerializer, JsonSerializerConformityTests, JsonTransformSerializerConformityTestTypes);
 
     class JsonTransformSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/TupleSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/TupleSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/TupleSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/TupleSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -518,7 +518,7 @@ namespace JsonSerializationTests
         TupleTestDescription,
         ComplexTupleTestDescription,
         NestedTupleTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(Tuple, JsonSerializerConformityTests, TupleConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(Tuple, JsonSerializerConformityTests, TupleConformityTestTypes);
 
     class JsonTupleSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/UnorderedSetSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/UnorderedSetSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/UnorderedSetSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/UnorderedSetSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -113,7 +113,7 @@ namespace JsonSerializationTests
     };
 
     using UnorderedSetSerializerConformityTestTypes = ::testing::Types< UnorderedSetTestDescription, UnorderedMultiSetTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(UnorderedSetSerializer, JsonSerializerConformityTests, UnorderedSetSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(UnorderedSetSerializer, JsonSerializerConformityTests, UnorderedSetSerializerConformityTestTypes);
 
     class JsonUnorderedSetSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/UnsupportedTypesSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/UnsupportedTypesSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/UnsupportedTypesSerializerTests.cpp.gtest-suite	2021-06-24 23:34:14.078834118 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/UnsupportedTypesSerializerTests.cpp	2021-06-24 23:34:36.758737272 +0000
@@ -61,7 +61,7 @@ namespace JsonSerializationTests
     };
 
     using UnsupportedTypesTestTypes = ::testing::Types<AnyInfo, VariantInfo, OptionalInfo>;
-    TYPED_TEST_CASE(JsonUnsupportedTypesSerializerTests, UnsupportedTypesTestTypes);
+    TYPED_TEST_SUITE(JsonUnsupportedTypesSerializerTests, UnsupportedTypesTestTypes);
 
     TYPED_TEST(JsonUnsupportedTypesSerializerTests, Load_CallDirectly_ReportsIssueAndHalts)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Serialization/Json/UuidSerializerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Serialization/Json/UuidSerializerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Serialization/Json/UuidSerializerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Serialization/Json/UuidSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -54,7 +54,7 @@ namespace JsonSerializationTests
     };
 
     using UuidSerializerConformityTestTypes = ::testing::Types<UuidSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(JsonUuidSerializer, JsonSerializerConformityTests, UuidSerializerConformityTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(JsonUuidSerializer, JsonSerializerConformityTests, UuidSerializerConformityTestTypes);
 
     class JsonUuidSerializerTests
         : public BaseJsonSerializerFixture
diff -up o3de/Code/Framework/AzCore/Tests/SettingsRegistryMergeUtilsTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/SettingsRegistryMergeUtilsTests.cpp
--- o3de/Code/Framework/AzCore/Tests/SettingsRegistryMergeUtilsTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/SettingsRegistryMergeUtilsTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -78,7 +78,7 @@ namespace SettingsRegistryMergeUtilsTest
             param.m_dumperSettings));
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         DumpSettings,
         SettingsRegistryMergeUtilsParamFixture,
         ::testing::Values(
@@ -343,7 +343,7 @@ namespace SettingsRegistryMergeUtilsTest
         }
     }
 
-INSTANTIATE_TEST_CASE_P(
+INSTANTIATE_TEST_SUITE_P(
     ReadConfigFile,
     SettingsRegistryMergeUtilsConfigFileFixture,
     ::testing::Values(
diff -up o3de/Code/Framework/AzCore/Tests/SettingsRegistryTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/SettingsRegistryTests.cpp
--- o3de/Code/Framework/AzCore/Tests/SettingsRegistryTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/SettingsRegistryTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -302,7 +302,7 @@ namespace SettingsRegistryTests
 
     using SettingsTypes = ::testing::Types<
         BoolTrue, BoolFalse, AZ::s64, double, AZStd::string, AZ::SettingsRegistryInterface::FixedValueString>;
-    TYPED_TEST_CASE(TypedSettingsRegistryTest, SettingsTypes);
+    TYPED_TEST_SUITE(TypedSettingsRegistryTest, SettingsTypes);
 
     TYPED_TEST(TypedSettingsRegistryTest, GetSet_SetAndGetValue_Success)
     {
diff -up o3de/Code/Framework/AzCore/Tests/Settings/SettingsRegistryScriptUtilsTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Settings/SettingsRegistryScriptUtilsTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Settings/SettingsRegistryScriptUtilsTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Settings/SettingsRegistryScriptUtilsTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -556,7 +556,7 @@ namespace SettingsRegistryScriptUtilsTes
         EXPECT_TRUE(updateNotifySent);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         SettingsRegistryBehaviorContextGetFunctions,
         SettingsRegistryBehaviorContextParamFixture,
         testing::Values(
diff -up o3de/Code/Framework/AzCore/Tests/Streamer/BlockCacheTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Streamer/BlockCacheTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Streamer/BlockCacheTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Streamer/BlockCacheTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -36,7 +36,7 @@ namespace AZ::IO
         }
     };
 
-    INSTANTIATE_TYPED_TEST_CASE_P(Streamer_BlockCacheConformityTests, StreamStackEntryConformityTests, BlockCacheTestDescription);
+    INSTANTIATE_TYPED_TEST_SUITE_P(Streamer_BlockCacheConformityTests, StreamStackEntryConformityTests, BlockCacheTestDescription);
 
     class BlockCacheTest
         : public UnitTest::AllocatorsFixture
diff -up o3de/Code/Framework/AzCore/Tests/Streamer/DedicatedCacheTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Streamer/DedicatedCacheTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Streamer/DedicatedCacheTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Streamer/DedicatedCacheTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -31,5 +31,5 @@ namespace AZ::IO
         }
     };
 
-    INSTANTIATE_TYPED_TEST_CASE_P(Streamer_DedicatedCacheConformityTests, StreamStackEntryConformityTests, DedicatedCacheTestDescription);
+    INSTANTIATE_TYPED_TEST_SUITE_P(Streamer_DedicatedCacheConformityTests, StreamStackEntryConformityTests, DedicatedCacheTestDescription);
 } // namespace AZ::IO
diff -up o3de/Code/Framework/AzCore/Tests/Streamer/FullDecompressorTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Streamer/FullDecompressorTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Streamer/FullDecompressorTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Streamer/FullDecompressorTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -49,7 +49,7 @@ namespace AZ::IO
         }
     };
 
-    INSTANTIATE_TYPED_TEST_CASE_P(
+    INSTANTIATE_TYPED_TEST_SUITE_P(
         Streamer_FullFileDecompressorConformityTests, StreamStackEntryConformityTests, FullFileDecompressorTestDescription);
 
     class Streamer_FullDecompressorTest
diff -up o3de/Code/Framework/AzCore/Tests/Streamer/ReadSplitterTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Streamer/ReadSplitterTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Streamer/ReadSplitterTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Streamer/ReadSplitterTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -51,7 +51,7 @@ namespace AZ::IO
     };
 
     using ReadSplitterTestTypes = ::testing::Types<ReadSplitterTestDescription, ReadSplitterWithBufferTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(Streamer_ReadSplitterConformityTests, StreamStackEntryConformityTests, ReadSplitterTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(Streamer_ReadSplitterConformityTests, StreamStackEntryConformityTests, ReadSplitterTestTypes);
 
     class Streamer_ReadSplitterTest
         : public UnitTest::ScopedAllocatorSetupFixture
diff -up o3de/Code/Framework/AzCore/Tests/Streamer/StreamStackEntryConformityTests.h.gtest-suite o3de/Code/Framework/AzCore/Tests/Streamer/StreamStackEntryConformityTests.h
--- o3de/Code/Framework/AzCore/Tests/Streamer/StreamStackEntryConformityTests.h.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Streamer/StreamStackEntryConformityTests.h	2021-06-24 23:31:23.939560634 +0000
@@ -80,7 +80,7 @@ namespace AZ::IO
         AZStd::unique_ptr<StreamerContext> m_context;
     };
 
-    TYPED_TEST_CASE_P(StreamStackEntryConformityTests);
+    TYPED_TEST_SUITE_P(StreamStackEntryConformityTests);
 
     TYPED_TEST_P(StreamStackEntryConformityTests, GetName_RetrieveNameSetOnConstruction_NameIsNotEmpty)
     {
@@ -320,7 +320,7 @@ namespace AZ::IO
         entry.CollectStatistics(statistics);
     }
 
-    REGISTER_TYPED_TEST_CASE_P(StreamStackEntryConformityTests,
+    REGISTER_TYPED_TEST_SUITE_P(StreamStackEntryConformityTests,
         GetName_RetrieveNameSetOnConstruction_NameIsNotEmpty,
         Next_SetAndGetNext_NextIsSetAndCanBeRetrieved,
         SetContext_ContextIsForwardedToNext_SetContextOnMockIsCalled,
diff -up o3de/Code/Framework/AzCore/Tests/Streamer/StreamStackEntryTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/Streamer/StreamStackEntryTests.cpp
--- o3de/Code/Framework/AzCore/Tests/Streamer/StreamStackEntryTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/Streamer/StreamStackEntryTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -29,5 +29,5 @@ namespace AZ::IO
         }
     };
 
-    INSTANTIATE_TYPED_TEST_CASE_P(Streamer_StreamStackEntryConformityTests, StreamStackEntryConformityTests, StreamStackEntryTestDescription);
+    INSTANTIATE_TYPED_TEST_SUITE_P(Streamer_StreamStackEntryConformityTests, StreamStackEntryConformityTests, StreamStackEntryTestDescription);
 } // namespace AZ::IO
diff -up o3de/Code/Framework/AzCore/Tests/StreamerTests.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/StreamerTests.cpp
--- o3de/Code/Framework/AzCore/Tests/StreamerTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/StreamerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -460,7 +460,7 @@ namespace AZ
 
 #if !AZ_TRAIT_DISABLE_FAILED_STREAMER_TESTS
         
-        TYPED_TEST_CASE_P(StreamerTest);
+        TYPED_TEST_SUITE_P(StreamerTest);
 
         // Read a file that's smaller than the cache.
         TYPED_TEST_P(StreamerTest, Read_ReadSmallFileEntirely_FileFullyRead)
@@ -664,7 +664,7 @@ namespace AZ
             EXPECT_TRUE(readSuccessful);
         }
 
-        REGISTER_TYPED_TEST_CASE_P(StreamerTest,
+        REGISTER_TYPED_TEST_SUITE_P(StreamerTest,
             Read_ReadSmallFileEntirely_FileFullyRead,
             Read_ReadLargeFileEntirely_FileFullyRead,
             Read_ReadMultiplePieces_AllReadRequestWereSuccessful,
@@ -674,7 +674,7 @@ namespace AZ
 
         using StreamerTestCases = ::testing::Types<GlobalCache_Uncompressed, DedicatedCache_Uncompressed, GlobalCache_Compressed, DedicatedCache_Compressed>;
 
-        INSTANTIATE_TYPED_TEST_CASE_P(StreamerTests, StreamerTest, StreamerTestCases);
+        INSTANTIATE_TYPED_TEST_SUITE_P(StreamerTests, StreamerTest, StreamerTestCases);
 #endif // AZ_TRAIT_DISABLE_FAILED_STREAMER_TESTS
 
     } // namespace IO
diff -up o3de/Code/Framework/AzCore/Tests/StringFunc.cpp.gtest-suite o3de/Code/Framework/AzCore/Tests/StringFunc.cpp
--- o3de/Code/Framework/AzCore/Tests/StringFunc.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzCore/Tests/StringFunc.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -989,14 +989,14 @@ namespace AZ
 
 #if AZ_TRAIT_OS_USE_WINDOWS_FILE_PATHS
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathWithSingleDotSubFolders,
         StringPathFuncTest, 
         ::testing::Values(
             TestPathStringArgs("F:\\test\\to\\get\\.\\drive\\", "F:\\test\\to\\get\\drive\\")
         ));
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathWithDoubleDotSubFolders,
         StringPathFuncTest, 
         ::testing::Values(
@@ -1011,13 +1011,13 @@ namespace AZ
             TestPathStringArgs("F:\\..\\",                                                           "F:\\")
    ));
 #else
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathWithSingleDotSubFolders,
         StringPathFuncTest, ::testing::Values(
             TestPathStringArgs("/test/to/get/./drive/", "/test/to/get/drive/")
         ));
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         PathWithDoubleDotSubFolders,
         StringPathFuncTest, 
         ::testing::Values(
diff -up o3de/Code/Framework/AzToolsFramework/Tests/EditorTransformComponentSelectionTests.cpp.gtest-suite o3de/Code/Framework/AzToolsFramework/Tests/EditorTransformComponentSelectionTests.cpp
--- o3de/Code/Framework/AzToolsFramework/Tests/EditorTransformComponentSelectionTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzToolsFramework/Tests/EditorTransformComponentSelectionTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -594,7 +594,7 @@ namespace UnitTest
         ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionSingleEntityPivotFixture,
         testing::Values(
@@ -643,7 +643,7 @@ namespace UnitTest
     }
 
     // with a single entity selected with a parent the orientation reference frames follow as you'd expect
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionSingleEntityWithParentPivotFixture,
         testing::Values(
@@ -699,7 +699,7 @@ namespace UnitTest
 
     // with a group selection, when the entities are not in a hierarchy, no matter what reference frame,
     // we will always get an orientation aligned to the world
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionMultipleEntitiesPivotFixture,
         testing::Values(
@@ -761,7 +761,7 @@ namespace UnitTest
 
     // here two entities are selected with the same parent - local and parent will match parent space, with world
     // giving the identity (aligned to world axes)
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionMultipleEntitiesWithSameParentPivotFixture,
         testing::Values(
@@ -823,7 +823,7 @@ namespace UnitTest
     }
 
     // if multiple entities are selected without a parent in common, orientation will always be world again
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionMultipleEntitiesWithDifferentParentPivotFixture,
         testing::Values(
@@ -873,7 +873,7 @@ namespace UnitTest
 
     // local reference frame will still return local orientation for entity, but pivot override will trump parent
     // space (world will still give identity alignment for axes)
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionSingleEntityPivotAndOverrideFixture,
         testing::Values(
@@ -932,7 +932,7 @@ namespace UnitTest
     }
 
     // with multiple entities selected, override frame wins in both local and parent reference frames
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionMultipleEntitiesPivotAndOverrideFixture,
         testing::Values(
@@ -989,7 +989,7 @@ namespace UnitTest
     }
 
     // multiple entities selected (no hierarchy) always get world aligned axes (identity)
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionMultipleEntitiesPivotAndNoOverrideFixture,
         testing::Values(
@@ -1051,7 +1051,7 @@ namespace UnitTest
 
     // no optional frame, same parent, local and parent both get parent alignment (world reference frame
     // gives world alignment (identity))
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         EditorTransformComponentSelectionMultipleEntitiesSameParentPivotAndNoOverrideFixture,
         testing::Values(
diff -up o3de/Code/Framework/AzToolsFramework/Tests/Prefab/Spawnable/SpawnableMetaDataTests.cpp.gtest-suite o3de/Code/Framework/AzToolsFramework/Tests/Prefab/Spawnable/SpawnableMetaDataTests.cpp
--- o3de/Code/Framework/AzToolsFramework/Tests/Prefab/Spawnable/SpawnableMetaDataTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzToolsFramework/Tests/Prefab/Spawnable/SpawnableMetaDataTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -90,7 +90,7 @@ namespace UnitTest
         }
     };
 
-    TYPED_TEST_CASE_P(TypedSpawnableMetaDataTests);
+    TYPED_TEST_SUITE_P(TypedSpawnableMetaDataTests);
 
     TYPED_TEST_P(TypedSpawnableMetaDataTests, Add_AddValueToMetaData_NoCrash)
     {
@@ -232,7 +232,7 @@ namespace UnitTest
         }
     }
 
-    REGISTER_TYPED_TEST_CASE_P(TypedSpawnableMetaDataTests,
+    REGISTER_TYPED_TEST_SUITE_P(TypedSpawnableMetaDataTests,
         Add_AddValueToMetaData_NoCrash,
         Add_ChainAdds_NoCrash,
         Add_AddThenRetrieveValue_StoredIsSameAsRetrieved,
@@ -246,7 +246,7 @@ namespace UnitTest
         Get_WrongType_ReturnsFalse);
 
     using SpawnableMetaDataTestTypes = ::testing::Types<bool, uint64_t, int64_t, double, AZStd::string>;
-    INSTANTIATE_TYPED_TEST_CASE_P(SpawnableMetaDataTests, TypedSpawnableMetaDataTests, SpawnableMetaDataTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(SpawnableMetaDataTests, TypedSpawnableMetaDataTests, SpawnableMetaDataTestTypes);
 
 
     TEST_F(SpawnableMetaDataTests, Get_UnknownKey_ReturnsFalse)
diff -up o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntCtrlCommonTests.cpp.gtest-suite o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntCtrlCommonTests.cpp
--- o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntCtrlCommonTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntCtrlCommonTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -23,7 +23,7 @@ namespace UnitTest
 
     };
 
-    TYPED_TEST_CASE(PropertyIntCtrlCommonFixture, IntegerPrimtitiveTestConfigs);
+    TYPED_TEST_SUITE(PropertyIntCtrlCommonFixture, IntegerPrimtitiveTestConfigs);
 
     TYPED_TEST(PropertyIntCtrlCommonFixture, ValidMinValue_ExpectSafeValueEqualToOriginalValue)
     {
diff -up o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntSliderCtrlTests.cpp.gtest-suite o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntSliderCtrlTests.cpp
--- o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntSliderCtrlTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntSliderCtrlTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -20,7 +20,7 @@ namespace UnitTest
     template <typename ValueType>
     using PropertySliderCtrlFixture = PropertyCtrlFixture<ValueType, PropertyIntSliderCtrl, IntSliderHandler>;
 
-    TYPED_TEST_CASE(PropertySliderCtrlFixture, IntegerPrimtitiveTestConfigs);
+    TYPED_TEST_SUITE(PropertySliderCtrlFixture, IntegerPrimtitiveTestConfigs);
 
     TYPED_TEST(PropertySliderCtrlFixture, PropertySliderCtrlHandlersCreated)
     {
diff -up o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntSpinCtrlTests.cpp.gtest-suite o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntSpinCtrlTests.cpp
--- o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntSpinCtrlTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzToolsFramework/Tests/PropertyIntSpinCtrlTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -20,7 +20,7 @@ namespace UnitTest
     template <typename ValueType>
     using PropertySpinCtrlFixture = PropertyCtrlFixture<ValueType, PropertyIntSpinCtrl, IntSpinBoxHandler>;
 
-    TYPED_TEST_CASE(PropertySpinCtrlFixture, IntegerPrimtitiveTestConfigs);
+    TYPED_TEST_SUITE(PropertySpinCtrlFixture, IntegerPrimtitiveTestConfigs);
 
     TYPED_TEST(PropertySpinCtrlFixture, PropertySpinCtrlHandlersCreated)
     {
diff -up o3de/Code/Framework/AzToolsFramework/Tests/QtWidgetLimitsTests.cpp.gtest-suite o3de/Code/Framework/AzToolsFramework/Tests/QtWidgetLimitsTests.cpp
--- o3de/Code/Framework/AzToolsFramework/Tests/QtWidgetLimitsTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/AzToolsFramework/Tests/QtWidgetLimitsTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -24,7 +24,7 @@ namespace UnitTest
 
     };
 
-    TYPED_TEST_CASE(QtWidgetLimitsFixture, IntegerPrimtitiveTestConfigs);
+    TYPED_TEST_SUITE(QtWidgetLimitsFixture, IntegerPrimtitiveTestConfigs);
 
     TYPED_TEST(QtWidgetLimitsFixture, MinRange)
     {
diff -up o3de/Code/Framework/Tests/ArchiveCompressionTests.cpp.gtest-suite o3de/Code/Framework/Tests/ArchiveCompressionTests.cpp
--- o3de/Code/Framework/Tests/ArchiveCompressionTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/Tests/ArchiveCompressionTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -443,7 +443,7 @@ namespace UnitTest
         EXPECT_TRUE(IsPackValid(testArchivePath.c_str()));
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         ArchiveCompression,
         ArchiveCompressionTestFixture,
         ::testing::Values(
diff -up o3de/Code/Framework/Tests/CameraState.cpp.gtest-suite o3de/Code/Framework/Tests/CameraState.cpp
--- o3de/Code/Framework/Tests/CameraState.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Framework/Tests/CameraState.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -89,7 +89,7 @@ namespace UnitTest
         EXPECT_THAT(m_cameraState.m_side, IsCloseTolerance(AZ::Vector3::CreateAxisX(), 0.01f));
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         CameraState,
         Translation,
         testing::Combine(
@@ -139,7 +139,7 @@ namespace UnitTest
         AZ_TEST_STOP_TRACE_SUPPRESSION(expectedErrors);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         CameraState,
         Rotation,
         testing::Combine(
@@ -166,7 +166,7 @@ namespace UnitTest
         EXPECT_NEAR(rotationDelta, 0.f, 0.01f);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         CameraState,
         WorldFromViewMatrix,
         testing::Combine(
@@ -189,7 +189,7 @@ namespace UnitTest
         EXPECT_NEAR(m_cameraState.m_fovOrZoom, fovY, 0.01f);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         CameraState,
         PerspectiveMatrix,
         testing::Combine(
diff -up o3de/Code/Tools/AssetProcessor/native/tests/AssetProcessorTest.cpp.gtest-suite o3de/Code/Tools/AssetProcessor/native/tests/AssetProcessorTest.cpp
--- o3de/Code/Tools/AssetProcessor/native/tests/AssetProcessorTest.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Tools/AssetProcessor/native/tests/AssetProcessorTest.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -164,7 +164,7 @@ namespace AssetProcessor
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         Test,
         LegacyTestAdapter,
         testing::ValuesIn(GenerateTestCases()),
diff -up o3de/Code/Tools/AzTestRunner/test/RunnerTest.cpp.gtest-suite o3de/Code/Tools/AzTestRunner/test/RunnerTest.cpp
--- o3de/Code/Tools/AzTestRunner/test/RunnerTest.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Tools/AzTestRunner/test/RunnerTest.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -49,7 +49,7 @@ TEST_P(EndsWithTest, CallEndsWith)
     ASSERT_EQ(p.m_expected, b);
 }
 
-INSTANTIATE_TEST_CASE_P(All, EndsWithTest, ::testing::Values(
+INSTANTIATE_TEST_SUITE_P(All, EndsWithTest, ::testing::Values(
     EndsWithParam("foo.dll", ".dll", true),
     EndsWithParam("foo.dll", ".dxx", false),
     EndsWithParam("abcdef", "bcd", false), // value found in middle
@@ -131,7 +131,7 @@ TEST_P(RemoveParametersTest, Foo)
     delete[] argv;
 }
 
-INSTANTIATE_TEST_CASE_P(All, RemoveParametersTest, ::testing::Values(
+INSTANTIATE_TEST_SUITE_P(All, RemoveParametersTest, ::testing::Values(
     RemoveParam { { "a", "b" }, 0, 0, { "b" } } // remove from start
     ,RemoveParam { { "a", "b" }, 1, 1, { "a" } } // remove from end
     ,RemoveParam { { "a", "b", "c" }, 1, 1, { "a", "c" } } // remove from middle
diff -up o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/ConvertIteratorTests.cpp.gtest-suite o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/ConvertIteratorTests.cpp
--- o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/ConvertIteratorTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/ConvertIteratorTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -88,7 +88,7 @@ namespace AZ
                     ~ConvertIteratorTests() override = default;
                 };
 
-                TYPED_TEST_CASE_P(ConvertIteratorTests);
+                TYPED_TEST_SUITE_P(ConvertIteratorTests);
 
                 // MakeConvertIterator
                 TYPED_TEST_P(ConvertIteratorTests, MakeConvertIterator_FunctionComparedWithExplicitlyDeclaredIterator_IteratorsAreEqual)
@@ -124,13 +124,13 @@ namespace AZ
                     EXPECT_EQ(view.end(), end);
                 }
 
-                REGISTER_TYPED_TEST_CASE_P(ConvertIteratorTests,
+                REGISTER_TYPED_TEST_SUITE_P(ConvertIteratorTests,
                     MakeConvertIterator_FunctionComparedWithExplicitlyDeclaredIterator_IteratorsAreEqual,
                     MakeConvertView_IteratorVersionComparedWithExplicitlyDeclaredIterators_ViewHasEquivalentBeginAndEnd,
                     MakeConvertView_ViewVersionComparedWithExplicitlyDeclaredIterators_ViewHasEquivalentBeginAndEnd
                     );
 
-                INSTANTIATE_TYPED_TEST_CASE_P(CommonTests, ConvertIteratorTests, BasicCollectionTypes);
+                INSTANTIATE_TYPED_TEST_SUITE_P(CommonTests, ConvertIteratorTests, BasicCollectionTypes);
 
                 // Casting
                 TEST(ConvertIterator, Casting_CanBetweenValueTypes_GetCastedValueAsInt)
diff -up o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/FilterIteratorTests.cpp.gtest-suite o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/FilterIteratorTests.cpp
--- o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/FilterIteratorTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/FilterIteratorTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -63,7 +63,7 @@ namespace AZ
                     AZStd::function<bool(const BaseIteratorReference)> m_testPredicate;
                 };
 
-                TYPED_TEST_CASE_P(FilterIteratorBasicTests);
+                TYPED_TEST_SUITE_P(FilterIteratorBasicTests);
 
                 TYPED_TEST_P(FilterIteratorBasicTests,
                     Constructor_InputIsEmptyValidBaseIterator_NoCrash)
@@ -506,7 +506,7 @@ namespace AZ
                     }
                 }
 
-                REGISTER_TYPED_TEST_CASE_P(FilterIteratorBasicTests,
+                REGISTER_TYPED_TEST_SUITE_P(FilterIteratorBasicTests,
                     Constructor_InputIsEmptyValidBaseIterator_NoCrash,
                     OperatorStar_GetValueByDereferencingIterator_ExpectFirstValueInArray,
                     Constructor_MovesForwardBasedOnPredicate_ExpectSkipFirstEntryAndReturnSecond,
@@ -529,7 +529,7 @@ namespace AZ
                     Algorithms_PartialSortCopyFilteredContainer_AllValuesLargerOrEqualThan10AreCopiedAndSorted
                     );
 
-                INSTANTIATE_TYPED_TEST_CASE_P(CommonTests,
+                INSTANTIATE_TYPED_TEST_SUITE_P(CommonTests,
                     FilterIteratorBasicTests,
                     BasicCollectionTypes);
 
@@ -558,7 +558,7 @@ namespace AZ
                     AZStd::function<bool(const BaseIteratorReference)> m_testPredicate;
                 };
 
-                TYPED_TEST_CASE_P(FilterIteratorMapTests);
+                TYPED_TEST_SUITE_P(FilterIteratorMapTests);
 
                 TYPED_TEST_P(FilterIteratorMapTests,
                     MakeFilterView_InputIsIterator_CorrectFilteredElements)
@@ -582,11 +582,11 @@ namespace AZ
                     EXPECT_TRUE(expectedElements.empty());
                 }
 
-                REGISTER_TYPED_TEST_CASE_P(FilterIteratorMapTests,
+                REGISTER_TYPED_TEST_SUITE_P(FilterIteratorMapTests,
                     MakeFilterView_InputIsIterator_CorrectFilteredElements
                     );
 
-                INSTANTIATE_TYPED_TEST_CASE_P(CommonTests,
+                INSTANTIATE_TYPED_TEST_SUITE_P(CommonTests,
                     FilterIteratorMapTests,
                     MapCollectionTypes);
 
diff -up o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/IteratorConformityTests.cpp.gtest-suite o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/IteratorConformityTests.cpp
--- o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/IteratorConformityTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/IteratorConformityTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -266,7 +266,7 @@ namespace AZ
                         ~AllContext() override = default;
                     };
 
-                    TYPED_TEST_CASE_P(AllContext);
+                    TYPED_TEST_SUITE_P(AllContext);
 
                     // Constructor
                     TYPED_TEST_P(AllContext, Constructor_CanBeConstructedAndDestructed_DoesNotCrash)
@@ -347,7 +347,7 @@ namespace AZ
                         ++iterator;
                     }
 
-                    REGISTER_TYPED_TEST_CASE_P(AllContext,
+                    REGISTER_TYPED_TEST_SUITE_P(AllContext,
                         Constructor_CanBeConstructedAndDestructed_DoesNotCrash,
                         CopyConstructor_CanBeCopyConstructedExplicit_DoesNotCrash,
                         CopyConstructor_CanBeCopyConstructedImplicit_DoesNotCrash,
@@ -374,7 +374,7 @@ namespace AZ
                         ~InputContext() override = default;
                     };
 
-                    TYPED_TEST_CASE_P(InputContext);
+                    TYPED_TEST_SUITE_P(InputContext);
 
                     // Equal operator
                     TYPED_TEST_P(InputContext, EqualsOperator_IteratorComparedWithSelf_SameIteratorObject)
@@ -584,7 +584,7 @@ namespace AZ
                         EXPECT_EQ(iteratorFirst, iteratorThird);
                     }
 
-                    REGISTER_TYPED_TEST_CASE_P(InputContext,
+                    REGISTER_TYPED_TEST_SUITE_P(InputContext,
                         EqualsOperator_IteratorComparedWithSelf_SameIteratorObject,
                         EqualsOperator_IdenticallyConstructedIterators_IteratorsAreEqual,
                         EqualsOperator_DifferentIterators_IteratorsAreNotEqual,
@@ -621,7 +621,7 @@ namespace AZ
                         ~ForwardContext() override = default;
                     };
 
-                    TYPED_TEST_CASE_P(ForwardContext);
+                    TYPED_TEST_SUITE_P(ForwardContext);
 
                     // Default constructor
                     TYPED_TEST_P(ForwardContext, DefaultConstructor_CanExplicityConstructed_DoesNotCrash)
@@ -652,7 +652,7 @@ namespace AZ
                         EXPECT_EQ(aValue, bValue);
                     }
 
-                    REGISTER_TYPED_TEST_CASE_P(ForwardContext,
+                    REGISTER_TYPED_TEST_SUITE_P(ForwardContext,
                         DefaultConstructor_CanExplicityConstructed_DoesNotCrash,
                         DefaultConstructor_CanImplicityConstructed_DoesNotCrash,
                         MultiPass_DereferencingMultipleTimes_ValueBeforeAndAfterIncrementingIsTheSame
@@ -673,7 +673,7 @@ namespace AZ
                         ~BidirectionalContext() override = default;
                     };
 
-                    TYPED_TEST_CASE_P(BidirectionalContext);
+                    TYPED_TEST_SUITE_P(BidirectionalContext);
 
                     // Post Decrement Operator
                     TYPED_TEST_P(BidirectionalContext, PostDecrementOperator_IterateOneStep_DoesNotCrash)
@@ -761,7 +761,7 @@ namespace AZ
                         EXPECT_EQ(*copy, *original);
                     }
 
-                    REGISTER_TYPED_TEST_CASE_P(BidirectionalContext,
+                    REGISTER_TYPED_TEST_SUITE_P(BidirectionalContext,
                         PostDecrementOperator_IterateOneStep_DoesNotCrash,
                         PostDecrementOperator_ReturnsIterator_DoesNotCrash,
                         PostDecrementOperator_IteratorReturnsOriginalIterator_OriginalIteratorMatchesCopiedValueAndNotMoveIterator,
@@ -787,7 +787,7 @@ namespace AZ
                         ~RandomAccessContext() override = default;
                     };
 
-                    TYPED_TEST_CASE_P(RandomAccessContext);
+                    TYPED_TEST_SUITE_P(RandomAccessContext);
 
                     // Difference subtract operator
                     TYPED_TEST_P(RandomAccessContext, DifferenceSubtractOperator_DifferenceWithItself_DifferenceIsZero)
@@ -999,7 +999,7 @@ namespace AZ
                         EXPECT_EQ(*moved, original[1]);
                     }
 
-                    REGISTER_TYPED_TEST_CASE_P(RandomAccessContext,
+                    REGISTER_TYPED_TEST_SUITE_P(RandomAccessContext,
                         DifferenceSubtractOperator_DifferenceWithItself_DifferenceIsZero,
                         DifferenceSubtractOperator_DifferenceBetweenIteratorsAtSamePosition_DifferenceIsZero,
                         DifferenceSubtractOperator_DifferenceBetweenIteratorsAtDifferentPositions_DifferenceIsOne,
@@ -1034,9 +1034,9 @@ namespace AZ
                     using GraphGroup = ::testing::Types<
                         SceneGraphUpwardsIteratorContext, SceneGraphChildIteratorContext,
                         SceneGraphDownwardsIteratorContext_DepthFirst, SceneGraphDownwardsIteratorContext_BreadthFirst>;
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_Base, AllContext, BaseGroup);
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_BaseExt, AllContext, BaseExtGroup);
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_Graph, AllContext, GraphGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_Base, AllContext, BaseGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_BaseExt, AllContext, BaseExtGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_Graph, AllContext, GraphGroup);
                 }
                 namespace InputIterators
                 {
@@ -1048,9 +1048,9 @@ namespace AZ
                     using GraphGroup = ::testing::Types<
                         SceneGraphUpwardsIteratorContext, SceneGraphChildIteratorContext,
                         SceneGraphDownwardsIteratorContext_DepthFirst, SceneGraphDownwardsIteratorContext_BreadthFirst>;
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_Base, InputContext, BaseGroup);
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_BaseExt, InputContext, BaseExtGroup);
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_Graph, InputContext, GraphGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_Base, InputContext, BaseGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_BaseExt, InputContext, BaseExtGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_Graph, InputContext, GraphGroup);
                 }
                 namespace ForwardIterators
                 {
@@ -1062,9 +1062,9 @@ namespace AZ
                     using GraphGroup = ::testing::Types<
                         SceneGraphUpwardsIteratorContext, SceneGraphChildIteratorContext,
                         SceneGraphDownwardsIteratorContext_DepthFirst, SceneGraphDownwardsIteratorContext_BreadthFirst>;
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_Base, ForwardContext, BaseGroup);
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_BaseExt, ForwardContext, BaseExtGroup);
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_Graph, ForwardContext, GraphGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_Base, ForwardContext, BaseGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_BaseExt, ForwardContext, BaseExtGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_Graph, ForwardContext, GraphGroup);
                 }
                 namespace BidirectionalIterators
                 {
@@ -1073,15 +1073,15 @@ namespace AZ
                             ConvertIteratorContext<VectorIteratorContext>, ConvertIteratorContext<ListIteratorContext>,
                             FilterIteratorContext<VectorIteratorContext>, FilterIteratorContext<ListIteratorContext>,
                             PairIteratorContext<VectorIteratorContext>, PairIteratorContext<ListIteratorContext>>;
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_Base, BidirectionalContext, BaseGroup);
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_BaseExt, BidirectionalContext, BaseExtGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_Base, BidirectionalContext, BaseGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_BaseExt, BidirectionalContext, BaseExtGroup);
                 }
                 namespace RandomAccessIterators
                 {
                     using BaseGroup = ::testing::Types<VectorIteratorContext>;
                     using BaseExtGroup = ::testing::Types<ConvertIteratorContext<VectorIteratorContext>, PairIteratorContext<VectorIteratorContext>>;
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_Base, RandomAccessContext, BaseGroup);
-                    INSTANTIATE_TYPED_TEST_CASE_P(IteratorConformityTests_BaseExt, RandomAccessContext, BaseExtGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_Base, RandomAccessContext, BaseGroup);
+                    INSTANTIATE_TYPED_TEST_SUITE_P(IteratorConformityTests_BaseExt, RandomAccessContext, BaseExtGroup);
                 }
             } // Views
         } // Containers
diff -up o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/PairIteratorTests.cpp.gtest-suite o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/PairIteratorTests.cpp
--- o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/PairIteratorTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/PairIteratorTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -100,7 +100,7 @@ namespace AZ
                     CollectionType m_secondContainer;
                 };
 
-                TYPED_TEST_CASE_P(PairIteratorTests);
+                TYPED_TEST_SUITE_P(PairIteratorTests);
 
                 TYPED_TEST_P(PairIteratorTests, MakePairIterator_BuildFromTwoSeparateIterators_StoredIteratorsMatchTheGivenIterators)
                 {
@@ -225,7 +225,7 @@ namespace AZ
                     }
                 }
 
-                REGISTER_TYPED_TEST_CASE_P(PairIteratorTests,
+                REGISTER_TYPED_TEST_SUITE_P(PairIteratorTests,
                     MakePairIterator_BuildFromTwoSeparateIterators_StoredIteratorsMatchTheGivenIterators,
                     MakePairIterator_BuildFromTwoSeparateIterators_FirstAndSecondInContainersCanBeAccessedThroughIterator,
                     MakePairView_CreateFromIterators_IteratorsInViewMatchExplicitlyCreatedIterators,
@@ -238,7 +238,7 @@ namespace AZ
                     PostIncrementOperator_IncrementingMovesBothIterators_BothStoredIteratorsMoved,
                     Algorithms_Generate_FirstContainerFilledWithTheFirstAndSecondContainerFilledWithSecondInGivenPair);
 
-                INSTANTIATE_TYPED_TEST_CASE_P(CommonTests, PairIteratorTests, BasicCollectionTypes);
+                INSTANTIATE_TYPED_TEST_SUITE_P(CommonTests, PairIteratorTests, BasicCollectionTypes);
 
                 // The following tests are done as standalone tests as not all iterators support this functionality
                 TEST(PairIteratorTest, PreDecrementIterator_DecrementingMovesBothIterators_BothStoredIteratorsMoved)
diff -up o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/SceneGraphDownwardsIteratorTests.cpp.gtest-suite o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/SceneGraphDownwardsIteratorTests.cpp
--- o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/SceneGraphDownwardsIteratorTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Code/Tools/SceneAPI/SceneCore/Tests/Containers/Views/SceneGraphDownwardsIteratorTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -88,7 +88,7 @@ namespace AZ
                     using Traversal = T;
                 };
 
-                TYPED_TEST_CASE_P(SceneGraphDownwardsIteratorContext);
+                TYPED_TEST_SUITE_P(SceneGraphDownwardsIteratorContext);
 
                 TYPED_TEST_P(SceneGraphDownwardsIteratorContext, MakeSceneGraphDownwardsIterator_FunctionComparedWithExplicitlyDeclaredIterator_IteratorsAreEqual)
                 {
@@ -322,7 +322,7 @@ namespace AZ
                     EXPECT_EQ(3, value->m_id);
                 }
 
-                REGISTER_TYPED_TEST_CASE_P(SceneGraphDownwardsIteratorContext,
+                REGISTER_TYPED_TEST_SUITE_P(SceneGraphDownwardsIteratorContext,
                     MakeSceneGraphDownwardsIterator_FunctionComparedWithExplicitlyDeclaredIterator_IteratorsAreEqual,
                     MakeSceneGraphDownwardsIterator_ExtendedFunctionComparedWithExplicitlyDeclaredIterator_IteratorsAreEqual,
                     MakeSceneGraphDownwardsIterator_NodeAndHierarchyVersions_IteratorsAreEqual,
@@ -346,7 +346,7 @@ namespace AZ
                     );
 
                 using Group = ::testing::Types<DepthFirst, BreadthFirst>;
-                INSTANTIATE_TYPED_TEST_CASE_P(SceneGraphDownwardsIteratorTests, SceneGraphDownwardsIteratorContext, Group);
+                INSTANTIATE_TYPED_TEST_SUITE_P(SceneGraphDownwardsIteratorTests, SceneGraphDownwardsIteratorContext, Group);
 
                 TEST_F(SceneGraphDownwardsIteratorTest, DepthFirst_IncrementOperator_MoveDownTheTree_IteratorReturnsParentOfPreviousIteration)
                 {
diff -up o3de/Gems/Atom/RHI/Code/Tests/BufferTests.cpp.gtest-suite o3de/Gems/Atom/RHI/Code/Tests/BufferTests.cpp
--- o3de/Gems/Atom/RHI/Code/Tests/BufferTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Gems/Atom/RHI/Code/Tests/BufferTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -394,6 +394,6 @@ namespace UnitTest
         return BufferBindFlagsToString(info.param.bufferBindFlags) + "BufferWith" + BufferBindFlagsToString(info.param.viewBindFlags) + "BufferView";
     }
 
-    INSTANTIATE_TEST_CASE_P(BufferView, BufferBindFlagTests, ::testing::ValuesIn(GenerateCompatibleBufferBindFlagCombinations()), GenerateBufferBindFlagTestCaseName);
-    INSTANTIATE_TEST_CASE_P(BufferView, BufferBindFlagFailureCases, ::testing::ValuesIn(GenerateIncompatibleBufferBindFlagCombinations()), GenerateBufferBindFlagTestCaseName);
+    INSTANTIATE_TEST_SUITE_P(BufferView, BufferBindFlagTests, ::testing::ValuesIn(GenerateCompatibleBufferBindFlagCombinations()), GenerateBufferBindFlagTestCaseName);
+    INSTANTIATE_TEST_SUITE_P(BufferView, BufferBindFlagFailureCases, ::testing::ValuesIn(GenerateIncompatibleBufferBindFlagCombinations()), GenerateBufferBindFlagTestCaseName);
 }
diff -up o3de/Gems/Atom/RHI/Code/Tests/ImageTests.cpp.gtest-suite o3de/Gems/Atom/RHI/Code/Tests/ImageTests.cpp
--- o3de/Gems/Atom/RHI/Code/Tests/ImageTests.cpp.gtest-suite	2021-06-21 14:59:29.000000000 +0000
+++ o3de/Gems/Atom/RHI/Code/Tests/ImageTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -399,6 +399,6 @@ namespace UnitTest
         return ImageBindFlagsToString(info.param.imageBindFlags) + "ImageWith" + ImageBindFlagsToString(info.param.viewBindFlags) + "ImageView";
     }
 
-    INSTANTIATE_TEST_CASE_P(ImageView, ImageBindFlagTests, ::testing::ValuesIn(GenerateCompatibleImageBindFlagCombinations()), GenerateImageBindFlagTestCaseName);
-    INSTANTIATE_TEST_CASE_P(ImageView, ImageBindFlagFailureCases, ::testing::ValuesIn(GenerateIncompatibleImageBindFlagCombinations()), GenerateImageBindFlagTestCaseName);
+    INSTANTIATE_TEST_SUITE_P(ImageView, ImageBindFlagTests, ::testing::ValuesIn(GenerateCompatibleImageBindFlagCombinations()), GenerateImageBindFlagTestCaseName);
+    INSTANTIATE_TEST_SUITE_P(ImageView, ImageBindFlagFailureCases, ::testing::ValuesIn(GenerateIncompatibleImageBindFlagCombinations()), GenerateImageBindFlagTestCaseName);
 }
diff -up o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialFunctorSourceDataSerializerTests.cpp.gtest-suite o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialFunctorSourceDataSerializerTests.cpp
--- o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialFunctorSourceDataSerializerTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialFunctorSourceDataSerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -126,5 +126,5 @@ namespace JsonSerializationTests
     };
 
     using MaterialFunctorSourceDataSerializerTestTypes = ::testing::Types<MaterialFunctorSourceDataSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(MaterialFunctorSourceDataTests, JsonSerializerConformityTests, MaterialFunctorSourceDataSerializerTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(MaterialFunctorSourceDataTests, JsonSerializerConformityTests, MaterialFunctorSourceDataSerializerTestTypes);
 } // namespace JsonSerializationTests
diff -up o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialPropertySerializerTests.cpp.gtest-suite o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialPropertySerializerTests.cpp
--- o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialPropertySerializerTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialPropertySerializerTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -165,7 +165,7 @@ namespace JsonSerializationTests
     };
 
     using MaterialPropertySerializerTestTypes = ::testing::Types<MaterialPropertySerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(MaterialPropertySerializerTests, JsonSerializerConformityTests, MaterialPropertySerializerTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(MaterialPropertySerializerTests, JsonSerializerConformityTests, MaterialPropertySerializerTestTypes);
 } // namespace JsonSerializationTests
 
 namespace UnitTest
diff -up o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialPropertyValueSourceDataTests.cpp.gtest-suite o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialPropertyValueSourceDataTests.cpp
--- o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialPropertyValueSourceDataTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/Atom/RPI/Code/Tests/Material/MaterialPropertyValueSourceDataTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -83,7 +83,7 @@ namespace JsonSerializationTests
     };
 
     using MaterialPropertyValueSourceDataSerializerTestTypes = ::testing::Types<MaterialPropertyValueSourceDataSerializerTestDescription>;
-    INSTANTIATE_TYPED_TEST_CASE_P(MaterialPropertyValueSourceDataTests, JsonSerializerConformityTests, MaterialPropertyValueSourceDataSerializerTestTypes);
+    INSTANTIATE_TYPED_TEST_SUITE_P(MaterialPropertyValueSourceDataTests, JsonSerializerConformityTests, MaterialPropertyValueSourceDataSerializerTestTypes);
 } // namespace JsonSerializationTests
 
 namespace UnitTest
diff -up o3de/Gems/Atom/RPI/Code/Tests/Model/ModelTests.cpp.gtest-suite o3de/Gems/Atom/RPI/Code/Tests/Model/ModelTests.cpp
--- o3de/Gems/Atom/RPI/Code/Tests/Model/ModelTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/Atom/RPI/Code/Tests/Model/ModelTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -1145,7 +1145,7 @@ namespace UnitTest
         IntersectParams{ 0.778f, 0.778f, 1.0f, 0.0f, 0.0f, -1.0f, 0.5f, true },
     };
 
-    INSTANTIATE_TEST_CASE_P(KdTreeIntersectsPlane, KdTreeIntersectsParameterizedFixture, ::testing::ValuesIn(KdTreeIntersectTestData));
+    INSTANTIATE_TEST_SUITE_P(KdTreeIntersectsPlane, KdTreeIntersectsParameterizedFixture, ::testing::ValuesIn(KdTreeIntersectTestData));
 
     class KdTreeIntersectsFixture
         : public ModelTests
@@ -1238,7 +1238,7 @@ namespace UnitTest
         IntersectParams{ 0.0f,  20.0f, 0.0f, 0.0f, -19.0f, 0.0f, 1.0f, true },
     };
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         BruteForceIntersects, BruteForceIntersectsParameterizedFixture, ::testing::ValuesIn(BruteForceIntersectTestData));
 
     class BruteForceModelIntersectsFixture
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphCommandTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphCommandTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphCommandTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphCommandTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -139,7 +139,7 @@ namespace EMotionFX
         , public ::testing::WithParamInterface<bool>
     {
     };
-    INSTANTIATE_TEST_CASE_P(LoadAnimGraphCommandTests, LoadAnimGraphCommandTestsBoolParam, ::testing::Bool());
+    INSTANTIATE_TEST_SUITE_P(LoadAnimGraphCommandTests, LoadAnimGraphCommandTestsBoolParam, ::testing::Bool());
 
     TEST_F(LoadAnimGraphCommandTests, DISABLED_LoadAnimGraph)
     {
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphCopyPasteTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphCopyPasteTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphCopyPasteTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphCopyPasteTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -264,7 +264,7 @@ namespace EMotionFX
         VerifyAfterOperation();
     }
 
-    INSTANTIATE_TEST_CASE_P(AnimGraphCopyPasteTests,
+    INSTANTIATE_TEST_SUITE_P(AnimGraphCopyPasteTests,
         AnimGraphTransitionConditionCopyPasteFixture,
         ::testing::Bool());
 
@@ -484,7 +484,7 @@ namespace EMotionFX
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(AnimGraphCopyPasteTests,
+    INSTANTIATE_TEST_SUITE_P(AnimGraphCopyPasteTests,
         AnimGraphSimpleCopyPasteFixture,
         ::testing::Bool());
 
@@ -597,7 +597,7 @@ namespace EMotionFX
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(CopyPasteTests,
+    INSTANTIATE_TEST_SUITE_P(CopyPasteTests,
         AnimGraphCopyPasteFixture_CanBeInterruptedBy,
         ::testing::Bool());
 
@@ -763,7 +763,7 @@ namespace EMotionFX
             "New connection's parameter weight should be the weight value of 1.";
     }
 
-    INSTANTIATE_TEST_CASE_P(AnimGraphCopyPasteTests,
+    INSTANTIATE_TEST_SUITE_P(AnimGraphCopyPasteTests,
         AnimGraphCopyPasteFixture_NodeTriggerValue,
         ::testing::Bool());
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphEventTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphEventTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphEventTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphEventTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -199,7 +199,7 @@ namespace EMotionFX
         SimulateTest(params.m_simulationTime, params.m_expectedFps, params.m_fpsVariance);
     }
 
-    INSTANTIATE_TEST_CASE_P(TestAnimGraphEvents,
+    INSTANTIATE_TEST_SUITE_P(TestAnimGraphEvents,
          AnimGraphEventTestFixture,
          ::testing::ValuesIn(animGraphEventTestData));
 } // EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphFuzzTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphFuzzTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphFuzzTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphFuzzTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -134,7 +134,7 @@ namespace EMotionFX
 
     const std::vector<Seed> randomSeeds = GetSeedsForTest(s_AnimGraphFuzzTestLoad);
 
-    INSTANTIATE_TEST_CASE_P(InstantiationName,
+    INSTANTIATE_TEST_SUITE_P(InstantiationName,
         AnimGraphFuzzTest,
         ::testing::ValuesIn(randomSeeds),
         ::testing::PrintToStringParamName()
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphNodeEventFilterTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphNodeEventFilterTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphNodeEventFilterTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphNodeEventFilterTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -288,7 +288,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(EventFilterTests,
+    INSTANTIATE_TEST_SUITE_P(EventFilterTests,
         AnimGraphNodeEventFilterTestFixture,
         ::testing::ValuesIn(EventFilteringTestData));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphNodeProcessingTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphNodeProcessingTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphNodeProcessingTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphNodeProcessingTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -200,7 +200,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(AnimGraphNodeProcessingTests,
+    INSTANTIATE_TEST_SUITE_P(AnimGraphNodeProcessingTests,
         AnimGraphNodeProcessingTestFixture,
         ::testing::ValuesIn(AnimGraphNodeProcessingTestTestData));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphRefCountTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphRefCountTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphRefCountTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphRefCountTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -138,7 +138,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(AnimGraphRefCountTest_SimpleChain,
+    INSTANTIATE_TEST_SUITE_P(AnimGraphRefCountTest_SimpleChain,
          AnimGraphRefCountTest_SimpleChain,
          ::testing::ValuesIn(animGraphRefCountTest_SimpleChainTestData)
     );
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineInterruptionTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineInterruptionTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineInterruptionTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineInterruptionTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -376,7 +376,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(AnimGraphStateMachine_InterruptionTest,
+    INSTANTIATE_TEST_SUITE_P(AnimGraphStateMachine_InterruptionTest,
         AnimGraphStateMachine_InterruptionFixture,
             ::testing::ValuesIn(animGraphStateMachineInterruptionTestData)
         );
@@ -545,7 +545,7 @@ namespace EMotionFX
         },
     };
 
-    INSTANTIATE_TEST_CASE_P(AnimGraphStateMachine_InterruptionPropertiesTest,
+    INSTANTIATE_TEST_SUITE_P(AnimGraphStateMachine_InterruptionPropertiesTest,
         AnimGraphStateMachine_InterruptionPropertiesFixture,
             ::testing::ValuesIn(animGraphStateMachineInterruptionPropertiesTestData)
         );
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineSyncTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineSyncTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineSyncTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineSyncTests.cpp	2021-06-24 23:31:23.939560634 +0000
@@ -217,7 +217,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(AnimGraphStateMachineSyncTests,
+    INSTANTIATE_TEST_SUITE_P(AnimGraphStateMachineSyncTests,
         AnimGraphStateMachineSyncFixture,
         ::testing::ValuesIn(animGraphStateMachineSyncTestData)
     );
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphStateMachineTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -84,7 +84,7 @@ namespace EMotionFX
         static_cast<int>(AnimGraphStateMachine::GetMaxNumPasses())
     };
 
-    INSTANTIATE_TEST_CASE_P(TestAnimGraphStateMachine_MultiplePassesSingleFrameTest,
+    INSTANTIATE_TEST_SUITE_P(TestAnimGraphStateMachine_MultiplePassesSingleFrameTest,
          AnimGraphStateMachine_MultiplePassesSingleFrameFixture,
          ::testing::ValuesIn(animGraphStateMachinePassesTestData)
      );
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphSyncTrackTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphSyncTrackTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphSyncTrackTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphSyncTrackTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -94,7 +94,7 @@ namespace EMotionFX
         EXPECT_EQ(indexRight, params.expectedRight);
     }
 
-    INSTANTIATE_TEST_CASE_P(TestFindEventIndices, TestFindEventIndicesFixture,
+    INSTANTIATE_TEST_SUITE_P(TestFindEventIndices, TestFindEventIndicesFixture,
         ::testing::ValuesIn(std::vector<FindEventIndicesParams> {
             {
                 MakeNoEvents,
@@ -166,8 +166,8 @@ namespace EMotionFX
                 1,
                 2
             },
-        });
-    );
+        }
+    ));
 
     struct FindMatchingEventsParams
     {
@@ -262,7 +262,7 @@ namespace EMotionFX
         EXPECT_EQ(outRight, params.expectedEventB);
     }
 
-    INSTANTIATE_TEST_CASE_P(TestFindMatchingEvents, TestFindMatchingEventsFixture,
+    INSTANTIATE_TEST_SUITE_P(TestFindMatchingEvents, TestFindMatchingEventsFixture,
         ::testing::ValuesIn(std::vector<FindMatchingEventsParams> {
             // With no events, it shouldn't matter what we put in, we'll get
             // back invalid indices
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphTransitionConditionTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphTransitionConditionTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphTransitionConditionTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphTransitionConditionTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -1296,7 +1296,7 @@ namespace EMotionFX
     {
         RunEMotionFXUpdateLoop();
     }
-    INSTANTIATE_TEST_CASE_P(TestMotionCondition, MotionConditionFixture,
+    INSTANTIATE_TEST_SUITE_P(TestMotionCondition, MotionConditionFixture,
         ::testing::ValuesIn(motionTransitionConditionData)
     );
 
@@ -1304,7 +1304,7 @@ namespace EMotionFX
     {
         RunEMotionFXUpdateLoop();
     }
-    INSTANTIATE_TEST_CASE_P(TestRangedMotionCondition, RangedMotionEventConditionFixture,
+    INSTANTIATE_TEST_SUITE_P(TestRangedMotionCondition, RangedMotionEventConditionFixture,
         ::testing::ValuesIn(rangedMotionTransitionConditionData)
     );
 
@@ -1313,7 +1313,7 @@ namespace EMotionFX
     {
         RunEMotionFXUpdateLoop();
     }
-    INSTANTIATE_TEST_CASE_P(TestParameterCondition, ParameterConditionFixture,
+    INSTANTIATE_TEST_SUITE_P(TestParameterCondition, ParameterConditionFixture,
         ::testing::ValuesIn(parameterTransitionConditionData)
     );
 
@@ -1322,7 +1322,7 @@ namespace EMotionFX
     {
         RunEMotionFXUpdateLoop();
     }
-    INSTANTIATE_TEST_CASE_P(TestPlayTimeCondition, PlayTimeConditionFixture,
+    INSTANTIATE_TEST_SUITE_P(TestPlayTimeCondition, PlayTimeConditionFixture,
         ::testing::ValuesIn(playTimeTransitionConditionData)
     );
 
@@ -1330,7 +1330,7 @@ namespace EMotionFX
     {
         RunEMotionFXUpdateLoop();
     }
-    INSTANTIATE_TEST_CASE_P(TestStateCondition, StateConditionFixture,
+    INSTANTIATE_TEST_SUITE_P(TestStateCondition, StateConditionFixture,
         ::testing::ValuesIn(stateTransitionConditionData)
     );
 
@@ -1339,7 +1339,7 @@ namespace EMotionFX
     {
         RunEMotionFXUpdateLoop();
     }
-    INSTANTIATE_TEST_CASE_P(TestTagCondition, TagConditionFixture,
+    INSTANTIATE_TEST_SUITE_P(TestTagCondition, TagConditionFixture,
         ::testing::ValuesIn(tagTransitionConditionData)
     );
 
@@ -1349,7 +1349,7 @@ namespace EMotionFX
     {
         RunEMotionFXUpdateLoop();
     }
-    INSTANTIATE_TEST_CASE_P(TestTimeCondition, TimeConditionFixture,
+    INSTANTIATE_TEST_SUITE_P(TestTimeCondition, TimeConditionFixture,
         ::testing::ValuesIn(timeTransitionConditionData)
     );
 
@@ -1358,7 +1358,7 @@ namespace EMotionFX
     {
         RunEMotionFXUpdateLoop();
     }
-    INSTANTIATE_TEST_CASE_P(TestVector2Condition, Vector2ConditionFixture,
+    INSTANTIATE_TEST_SUITE_P(TestVector2Condition, Vector2ConditionFixture,
         ::testing::ValuesIn(vector2TransitionConditionData)
     );
 
diff -up o3de/Gems/EMotionFX/Code/Tests/AnimGraphTransitionTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AnimGraphTransitionTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AnimGraphTransitionTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AnimGraphTransitionTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -56,7 +56,7 @@ namespace EMotionFX
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(TestAnimGraphTransitionWeights, AnimGraphTransitionFixtureParams,
+    INSTANTIATE_TEST_SUITE_P(TestAnimGraphTransitionWeights, AnimGraphTransitionFixtureParams,
         ::testing::Values(
             &AnimGraphNodeData::GetLocalWeight,
             &AnimGraphNodeData::GetGlobalWeight
diff -up o3de/Gems/EMotionFX/Code/Tests/AutoSkeletonLODTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/AutoSkeletonLODTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/AutoSkeletonLODTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/AutoSkeletonLODTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -245,7 +245,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(AutoSkeletonLOD_Tests,
+    INSTANTIATE_TEST_SUITE_P(AutoSkeletonLOD_Tests,
         AutoSkeletonLODFixture,
             ::testing::ValuesIn(testParams)
         );
diff -up o3de/Gems/EMotionFX/Code/Tests/BlendTreeBlendNNodeTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/BlendTreeBlendNNodeTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/BlendTreeBlendNNodeTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/BlendTreeBlendNNodeTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -404,7 +404,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(BlendTreeBlendNNode,
+    INSTANTIATE_TEST_SUITE_P(BlendTreeBlendNNode,
         BlendTreeBlendNNodeSyncTestFixture,
         ::testing::ValuesIn(blendNNodeSyncTestData));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/BlendTreeFloatConditionNodeTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/BlendTreeFloatConditionNodeTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/BlendTreeFloatConditionNodeTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/BlendTreeFloatConditionNodeTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -201,7 +201,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(BlendTreeFloatConditionNode_ConditionTest,
+    INSTANTIATE_TEST_SUITE_P(BlendTreeFloatConditionNode_ConditionTest,
         BlendTreeFloatConditionNodeFixture,
         ::testing::Combine(
             ::testing::Bool(),
diff -up o3de/Gems/EMotionFX/Code/Tests/BlendTreeFloatMath1NodeTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/BlendTreeFloatMath1NodeTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/BlendTreeFloatMath1NodeTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/BlendTreeFloatMath1NodeTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -379,7 +379,7 @@ namespace EMotionFX
         TestInput<MCore::AttributeBool, bool>("BoolParam", m_param.m_xInputBool);
     };
 
-    INSTANTIATE_TEST_CASE_P(BlendTreeFloatMath1Node_ValidOutputTests,
+    INSTANTIATE_TEST_SUITE_P(BlendTreeFloatMath1Node_ValidOutputTests,
         BlendTreeFloatMath1NodeFixture,
             ::testing::ValuesIn(blendTreeFloatMath1NodeTestData)
     );
diff -up o3de/Gems/EMotionFX/Code/Tests/BlendTreeMaskNodeTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/BlendTreeMaskNodeTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/BlendTreeMaskNodeTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/BlendTreeMaskNodeTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -313,7 +313,7 @@ namespace EMotionFX
         },
     };
 
-    INSTANTIATE_TEST_CASE_P(BlendTreeMaskNode,
+    INSTANTIATE_TEST_SUITE_P(BlendTreeMaskNode,
         BlendTreeMaskNodeTestFixture,
             ::testing::ValuesIn(maskNodeTestData));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/BlendTreeRagdollNodeTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/BlendTreeRagdollNodeTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/BlendTreeRagdollNodeTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/BlendTreeRagdollNodeTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -80,7 +80,7 @@ namespace EMotionFX
             << "Activation expected in case const float value is not zero.";
     }
 
-    INSTANTIATE_TEST_CASE_P(BlendTreeRagdollNode_ConstFloatActivateInputTest,
+    INSTANTIATE_TEST_SUITE_P(BlendTreeRagdollNode_ConstFloatActivateInputTest,
         BlendTreeRagdollNode_ConstFloatActivateInputTest,
         ::testing::ValuesIn({ -1.0f, 0.0f, 0.1f, 1.0f }));
 
@@ -213,7 +213,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(RagdollRootNodeIsSimulatedTests,
+    INSTANTIATE_TEST_SUITE_P(RagdollRootNodeIsSimulatedTests,
         RagdollRootNodeFixture,
         ::testing::ValuesIn(ragdollRootNodeIsSimulatedTestValues));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/BlendTreeRangeRemapperNodeTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/BlendTreeRangeRemapperNodeTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/BlendTreeRangeRemapperNodeTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/BlendTreeRangeRemapperNodeTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -154,7 +154,7 @@ namespace EMotionFX
 #endif
     };
 
-    INSTANTIATE_TEST_CASE_P(BlendTreeRangeRemapperNode_ValidOutputTests,
+    INSTANTIATE_TEST_SUITE_P(BlendTreeRangeRemapperNode_ValidOutputTests,
         BlendTreeRangeRemapperNodeFixture,
         ::testing::ValuesIn(blendTreeRangeRemapperNodeTestData)
     );
diff -up o3de/Gems/EMotionFX/Code/Tests/BlendTreeTwoLinkIKNodeTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/BlendTreeTwoLinkIKNodeTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/BlendTreeTwoLinkIKNodeTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/BlendTreeTwoLinkIKNodeTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -543,7 +543,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(BlendTreeTwoLinkIKNode_OutputTests,
+    INSTANTIATE_TEST_SUITE_P(BlendTreeTwoLinkIKNode_OutputTests,
         BlendTreeTwoLinkIKNodeFixture,
         ::testing::Combine(
             ::testing::Bool(),
diff -up o3de/Gems/EMotionFX/Code/Tests/Bugs/CanUndoParameterDeletionAndRestoreBlendTreeConnections.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/Bugs/CanUndoParameterDeletionAndRestoreBlendTreeConnections.cpp
--- o3de/Gems/EMotionFX/Code/Tests/Bugs/CanUndoParameterDeletionAndRestoreBlendTreeConnections.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/Bugs/CanUndoParameterDeletionAndRestoreBlendTreeConnections.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -188,5 +188,5 @@ namespace EMotionFX
         Run();
     };
 
-    INSTANTIATE_TEST_CASE_P(UndoParameterDeletionTests, UndoParameterDeletionTests, ::testing::Values(prepareLY92860Commands));
+    INSTANTIATE_TEST_SUITE_P(UndoParameterDeletionTests, UndoParameterDeletionTests, ::testing::Values(prepareLY92860Commands));
 } // EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/ColliderCommandTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/ColliderCommandTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/ColliderCommandTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/ColliderCommandTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -310,7 +310,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(EditColliderCommandTests,
+    INSTANTIATE_TEST_SUITE_P(EditColliderCommandTests,
         EditColliderCommandFixture,
         ::testing::ValuesIn(editColliderCommandTestParameters)
     );
diff -up o3de/Gems/EMotionFX/Code/Tests/CommandAdjustSimulatedObjectTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/CommandAdjustSimulatedObjectTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/CommandAdjustSimulatedObjectTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/CommandAdjustSimulatedObjectTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -263,7 +263,7 @@ namespace EMotionFX
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(TestCommandAdjustSimulatedObject, CommandAdjustSimulatedObjectTestsFixture,
+    INSTANTIATE_TEST_SUITE_P(TestCommandAdjustSimulatedObject, CommandAdjustSimulatedObjectTestsFixture,
         ::testing::Combine(
             ::testing::Bool(), // Test execute or test undo
             ::testing::Bool(), // Use command strings or not
@@ -632,7 +632,7 @@ namespace EMotionFX
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(TestCommandAdjustSimulatedJoint, CommandAdjustSimulatedJointTestsFixture,
+    INSTANTIATE_TEST_SUITE_P(TestCommandAdjustSimulatedJoint, CommandAdjustSimulatedJointTestsFixture,
         ::testing::Combine(
             ::testing::Bool(), // Test execute or test undo
             ::testing::Bool(), // Use command strings or not
diff -up o3de/Gems/EMotionFX/Code/Tests/Editor/ParametersGroupDefaultValues.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/Editor/ParametersGroupDefaultValues.cpp
--- o3de/Gems/EMotionFX/Code/Tests/Editor/ParametersGroupDefaultValues.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/Editor/ParametersGroupDefaultValues.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -126,7 +126,7 @@ namespace EMotionFX
         Vector4ParameterT
     >;
 
-    TYPED_TEST_CASE(CanSetParameterToDefaultValueWhenInGroupFixture, TypesToTest);
+    TYPED_TEST_SUITE(CanSetParameterToDefaultValueWhenInGroupFixture, TypesToTest);
 
     TYPED_TEST(CanSetParameterToDefaultValueWhenInGroupFixture, CanSetParameterToDefaultValueWhenInGroup)
     {
diff -up o3de/Gems/EMotionFX/Code/Tests/Game/SamplePerformanceTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/Game/SamplePerformanceTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/Game/SamplePerformanceTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/Game/SamplePerformanceTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -704,7 +704,7 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(PerformanceTests,
+    INSTANTIATE_TEST_SUITE_P(PerformanceTests,
         PerformanceTestFixture,
         ::testing::ValuesIn(performanceTestData));
 
diff -up o3de/Gems/EMotionFX/Code/Tests/Integration/PoseComparisonTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/Integration/PoseComparisonTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/Integration/PoseComparisonTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/Integration/PoseComparisonTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -298,7 +298,7 @@ namespace EMotionFX
         recording->Destroy();
     }
 
-    INSTANTIATE_TEST_CASE_P(Integ_TestPoses, INTEG_PoseComparisonFixture,
+    INSTANTIATE_TEST_SUITE_P(Integ_TestPoses, INTEG_PoseComparisonFixture,
         ::testing::Values(
             PoseComparisonFixtureParams (
                 "@assets@/Test.Assets/Gems/EMotionFX/Code/Tests/TestAssets/Rin/rin.actor",
@@ -315,7 +315,7 @@ namespace EMotionFX
         )
     );
 
-    INSTANTIATE_TEST_CASE_P(Integ_TestPoseComparison, INTEG_TestPoseComparisonFixture,
+    INSTANTIATE_TEST_SUITE_P(Integ_TestPoseComparison, INTEG_TestPoseComparisonFixture,
         ::testing::Values(
             PoseComparisonFixtureParams (
                 "@assets@/Test.Assets/Gems/EMotionFX/Code/Tests/TestAssets/Rin/rin.actor",
diff -up o3de/Gems/EMotionFX/Code/Tests/MCore/CommandLineTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/MCore/CommandLineTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/MCore/CommandLineTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/MCore/CommandLineTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -112,5 +112,5 @@ namespace EMotionFX
         },
     };
 
-    INSTANTIATE_TEST_CASE_P(TestCommandLine, CommandLineFixture, ::testing::ValuesIn(commandLineTestData));
+    INSTANTIATE_TEST_SUITE_P(TestCommandLine, CommandLineFixture, ::testing::ValuesIn(commandLineTestData));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/MCore/CommandManagerTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/MCore/CommandManagerTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/MCore/CommandManagerTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/MCore/CommandManagerTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -264,7 +264,7 @@ namespace EMotionFX
         tester.TestCommandGroup(commandGroup, 4, 0.0f, 4.0f, GetParam());
     }
 
-    INSTANTIATE_TEST_CASE_P(CommandGroupTests,
+    INSTANTIATE_TEST_SUITE_P(CommandGroupTests,
         CommandGroupFixture,
         ::testing::ValuesIn({ TestCommandExecutionMethod::Execute, TestCommandExecutionMethod::Undo, TestCommandExecutionMethod::Redo}));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/MorphTargetPipelineTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/MorphTargetPipelineTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/MorphTargetPipelineTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/MorphTargetPipelineTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -298,7 +298,7 @@ namespace EMotionFX
 
     // Note that these values are instantiated before the SystemAllocator is
     // created, so we can't use AZStd::vector
-    INSTANTIATE_TEST_CASE_P(TestMorphTargetCreation, MorphTargetCreationTestFixture,
+    INSTANTIATE_TEST_SUITE_P(TestMorphTargetCreation, MorphTargetCreationTestFixture,
         ::testing::Values(
             std::vector<std::string> {},
             std::vector<std::string> {"testMorphTarget0"},
diff -up o3de/Gems/EMotionFX/Code/Tests/MotionEventTrackTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/MotionEventTrackTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/MotionEventTrackTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/MotionEventTrackTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -887,6 +887,6 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(TestExtractProcessEvents, TestExtractProcessEventsFixture,
+    INSTANTIATE_TEST_SUITE_P(TestExtractProcessEvents, TestExtractProcessEventsFixture,
         ::testing::ValuesIn(extractEventTestData));
 } // end namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/MotionExtractionTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/MotionExtractionTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/MotionExtractionTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/MotionExtractionTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -343,7 +343,7 @@ namespace EMotionFX
         EXPECT_EQ(m_animGraphInstance->GetEventBuffer().GetNumEvents(), 0);
     }
     
-    INSTANTIATE_TEST_CASE_P(MotionExtraction_OutputTests,
+    INSTANTIATE_TEST_SUITE_P(MotionExtraction_OutputTests,
         MotionExtractionFixture,
         ::testing::Combine(
             ::testing::Bool(),
diff -up o3de/Gems/EMotionFX/Code/Tests/MotionInstanceTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/MotionInstanceTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/MotionInstanceTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/MotionInstanceTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -750,5 +750,5 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(MotionInstanceTests, MotionInstanceFixture, ::testing::ValuesIn(motionInstanceTestParams));
+    INSTANTIATE_TEST_SUITE_P(MotionInstanceTests, MotionInstanceFixture, ::testing::ValuesIn(motionInstanceTestParams));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/PoseTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/PoseTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/PoseTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/PoseTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -154,7 +154,7 @@ namespace EMotionFX
         , public ::testing::WithParamInterface<bool>
     {
     };
-    INSTANTIATE_TEST_CASE_P(PoseTests, PoseTestsBoolParam, ::testing::Bool());
+    INSTANTIATE_TEST_SUITE_P(PoseTests, PoseTestsBoolParam, ::testing::Bool());
 
     TEST_F(PoseTests, Clear)
     {
@@ -772,7 +772,7 @@ namespace EMotionFX
         , public ::testing::WithParamInterface<float>
     {
     };
-    INSTANTIATE_TEST_CASE_P(PoseTests, PoseTestsBlendWeightParam, ::testing::ValuesIn({0.0f, 0.1f, 0.25f, 0.33f, 0.5f, 0.77f, 1.0f}));
+    INSTANTIATE_TEST_SUITE_P(PoseTests, PoseTestsBlendWeightParam, ::testing::ValuesIn({0.0f, 0.1f, 0.25f, 0.33f, 0.5f, 0.77f, 1.0f}));
 
     TEST_P(PoseTestsBlendWeightParam, Blend)
     {
@@ -888,7 +888,7 @@ namespace EMotionFX
         , public ::testing::WithParamInterface<PoseTestsMultiplyFunction>
     {
     };
-    INSTANTIATE_TEST_CASE_P(PoseTests, PoseTestsMultiply, ::testing::ValuesIn({
+    INSTANTIATE_TEST_SUITE_P(PoseTests, PoseTestsMultiply, ::testing::ValuesIn({
         PreMultiply, Multiply, MultiplyInverse}));
 
     TEST_P(PoseTestsMultiply, Multiply)
@@ -950,7 +950,7 @@ namespace EMotionFX
         , public ::testing::WithParamInterface<float>
     {
     };
-    INSTANTIATE_TEST_CASE_P(PoseTests, PoseTestsSum, ::testing::ValuesIn({0.0f, 0.1f, 0.25f, 0.33f, 0.5f, 0.77f, 1.0f}));
+    INSTANTIATE_TEST_SUITE_P(PoseTests, PoseTestsSum, ::testing::ValuesIn({0.0f, 0.1f, 0.25f, 0.33f, 0.5f, 0.77f, 1.0f}));
 
     TEST_P(PoseTestsSum, Sum)
     {
@@ -1069,7 +1069,7 @@ namespace EMotionFX
         {true, ApplyAdditiveWeight, 0.0f}, {true, ApplyAdditiveWeight, 0.25f}, {true, ApplyAdditiveWeight, 0.5f}, {true, ApplyAdditiveWeight, 1.0f}
     };
 
-    INSTANTIATE_TEST_CASE_P(PoseTests, PoseTestsAdditive, ::testing::ValuesIn(poseTestsAdditiveData));
+    INSTANTIATE_TEST_SUITE_P(PoseTests, PoseTestsAdditive, ::testing::ValuesIn(poseTestsAdditiveData));
 
     TEST_P(PoseTestsAdditive, Additive)
     {
diff -up o3de/Gems/EMotionFX/Code/Tests/ProvidesUI/AnimGraph/Parameters/AddParameter.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/ProvidesUI/AnimGraph/Parameters/AddParameter.cpp
--- o3de/Gems/EMotionFX/Code/Tests/ProvidesUI/AnimGraph/Parameters/AddParameter.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/ProvidesUI/AnimGraph/Parameters/AddParameter.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -111,7 +111,7 @@ namespace EMotionFX
         return result;
     }
 
-    INSTANTIATE_TEST_CASE_P(AddParameters,
+    INSTANTIATE_TEST_SUITE_P(AddParameters,
         AddParametersFixture,
         ::testing::ValuesIn(GetValueParameterTypeIndices()));
 } // namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/ProvidesUI/AnimGraph/ParametersGroupDefaultValues.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/ProvidesUI/AnimGraph/ParametersGroupDefaultValues.cpp
--- o3de/Gems/EMotionFX/Code/Tests/ProvidesUI/AnimGraph/ParametersGroupDefaultValues.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/ProvidesUI/AnimGraph/ParametersGroupDefaultValues.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -123,7 +123,7 @@ namespace EMotionFX
         Vector4ParameterT
     >;
 
-    TYPED_TEST_CASE(CanSetParameterToDefaultValueWhenInGroupFixture, TypesToTest);
+    TYPED_TEST_SUITE(CanSetParameterToDefaultValueWhenInGroupFixture, TypesToTest);
 
     TYPED_TEST(CanSetParameterToDefaultValueWhenInGroupFixture, CanSetParameterToDefaultValueWhenInGroup)
     {
diff -up o3de/Gems/EMotionFX/Code/Tests/QuaternionParameterTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/QuaternionParameterTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/QuaternionParameterTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/QuaternionParameterTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -138,7 +138,7 @@ namespace EMotionFX
         AZ::Quaternion(AZ::Constants::FloatMax, -AZ::Constants::FloatMax, AZ::Constants::FloatEpsilon, 1.0f)
     };
 
-    INSTANTIATE_TEST_CASE_P(QuaternionParameter_ValidOutputTests,
+    INSTANTIATE_TEST_SUITE_P(QuaternionParameter_ValidOutputTests,
         QuaternionParameterFixture,
         ::testing::ValuesIn(quaternionParameterTestData)
     );
diff -up o3de/Gems/EMotionFX/Code/Tests/SimulatedObjectSetupTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/SimulatedObjectSetupTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/SimulatedObjectSetupTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/SimulatedObjectSetupTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -185,7 +185,7 @@ namespace SimulatedObjectSetupTests
         EXPECT_EQ(object->GetSimulatedJoints().size(), GetParam().expectedSimulatedJointCount);
     }
 
-    INSTANTIATE_TEST_CASE_P(Test, AddSimulatedJointAndChildrenFixture,
+    INSTANTIATE_TEST_SUITE_P(Test, AddSimulatedJointAndChildrenFixture,
         testing::ValuesIn(std::vector<AddSimulatedJointAndChildrenParams>
         {
             {PrefabLeftArmSkeleton::leftShoulderIndex, 13}, // leftShoulder is a root joint
@@ -304,7 +304,7 @@ namespace SimulatedObjectSetupTests
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(Test, GetSimulatedRootJointFixture,
+    INSTANTIATE_TEST_SUITE_P(Test, GetSimulatedRootJointFixture,
         ::testing::Combine(
             ::testing::Values(
                 PrefabLeftArmSkeleton::leftShoulderIndex,
diff -up o3de/Gems/EMotionFX/Code/Tests/SyncingSystemTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/SyncingSystemTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/SyncingSystemTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/SyncingSystemTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -267,6 +267,6 @@ namespace EMotionFX
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(SyncingSystem, SyncingSystemFixture,
+    INSTANTIATE_TEST_SUITE_P(SyncingSystem, SyncingSystemFixture,
         ::testing::ValuesIn(SyncTestData));
 } // end namespace EMotionFX
diff -up o3de/Gems/EMotionFX/Code/Tests/TransformUnitTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/TransformUnitTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/TransformUnitTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/TransformUnitTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -172,7 +172,7 @@ namespace EMotionFX
         )
     }
 
-    INSTANTIATE_TEST_CASE_P(Test, TransformConstructFromVec3QuatVec3Fixture,
+    INSTANTIATE_TEST_SUITE_P(Test, TransformConstructFromVec3QuatVec3Fixture,
         ::testing::Combine(
             ::testing::Values(
                 AZ::Vector3::CreateZero(),
@@ -352,7 +352,7 @@ namespace EMotionFX
         );
     }
 
-    INSTANTIATE_TEST_CASE_P(Test, TransformMultiplyFixture,
+    INSTANTIATE_TEST_SUITE_P(Test, TransformMultiplyFixture,
         ::testing::Values(
             TransformMultiplyParams {
                 /* input a */{Transform::CreateIdentity()},
@@ -717,7 +717,7 @@ namespace EMotionFX
         );
     }
 
-    INSTANTIATE_TEST_CASE_P(Test, TransformApplyDeltaFixture,
+    INSTANTIATE_TEST_SUITE_P(Test, TransformApplyDeltaFixture,
         ::testing::ValuesIn(std::vector<ApplyDeltaParams>{
             {
                 {Transform::CreateIdentity()},
@@ -958,7 +958,7 @@ namespace EMotionFX
         AZ::Constants::QuarterPi,
         AZ::Constants::HalfPi
     );
-    INSTANTIATE_TEST_CASE_P(Test, TransformProjectedToGroundPlaneFixture,
+    INSTANTIATE_TEST_SUITE_P(Test, TransformProjectedToGroundPlaneFixture,
         ::testing::Combine(
             ::testing::Values(
                 AZ::Vector3::CreateZero(),
diff -up o3de/Gems/EMotionFX/Code/Tests/UI/CanAdjustGroupParameter.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/UI/CanAdjustGroupParameter.cpp
--- o3de/Gems/EMotionFX/Code/Tests/UI/CanAdjustGroupParameter.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/UI/CanAdjustGroupParameter.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -14,7 +14,7 @@
 
 namespace EMotionFX
 {
-    INSTANTIATE_TEST_CASE_P(CanAdjustGroupParameter, CommandRunnerFixture,
+    INSTANTIATE_TEST_SUITE_P(CanAdjustGroupParameter, CommandRunnerFixture,
         ::testing::Values(std::vector<std::string> {
             R"str(CreateAnimGraph)str",
             R"str(AnimGraphAddGroupParameter -animGraphID 0 -name Group0)str",
diff -up o3de/Gems/EMotionFX/Code/Tests/UI/CanDeleteAnimGraphNode_AnimGraphModelUpdates.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/UI/CanDeleteAnimGraphNode_AnimGraphModelUpdates.cpp
--- o3de/Gems/EMotionFX/Code/Tests/UI/CanDeleteAnimGraphNode_AnimGraphModelUpdates.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/UI/CanDeleteAnimGraphNode_AnimGraphModelUpdates.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -68,7 +68,7 @@ namespace EMotionFX
 
     }
 
-    INSTANTIATE_TEST_CASE_P(CanDeleteAnimGraphNode_AnimGraphModelUpdates, CanDeleteAnimGraphNode,
+    INSTANTIATE_TEST_SUITE_P(CanDeleteAnimGraphNode_AnimGraphModelUpdates, CanDeleteAnimGraphNode,
         ::testing::Values(std::vector<std::string> {
             R"str(CreateAnimGraph)str",
             R"str(Select -animGraphID 0)str",
diff -up o3de/Gems/EMotionFX/Code/Tests/UI/CanRenameParameter_ParameterNodeUpdates.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/UI/CanRenameParameter_ParameterNodeUpdates.cpp
--- o3de/Gems/EMotionFX/Code/Tests/UI/CanRenameParameter_ParameterNodeUpdates.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/UI/CanRenameParameter_ParameterNodeUpdates.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -14,7 +14,7 @@
 
 namespace EMotionFX
 {
-    INSTANTIATE_TEST_CASE_P(CanRenameParameter_ParameterNodeUpdates, CommandRunnerFixture,
+    INSTANTIATE_TEST_SUITE_P(CanRenameParameter_ParameterNodeUpdates, CommandRunnerFixture,
         ::testing::Values(std::vector<std::string> {
             R"str(CreateAnimGraph)str",
             R"str(AnimGraphCreateNode -animGraphID 0 -type {A8B5BB1E-5BA9-4B0A-88E9-21BB7A199ED2} -parentName Root -xPos 240 -yPos 230 -name GENERATE -namePrefix BlendTree)str",
diff -up o3de/Gems/EMotionFX/Code/Tests/UI/LODSkinnedMeshTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/UI/LODSkinnedMeshTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/UI/LODSkinnedMeshTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/UI/LODSkinnedMeshTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -171,7 +171,7 @@ namespace EMotionFX
         EXPECT_TRUE(testString == defaultString);
     }
 
-    INSTANTIATE_TEST_CASE_P(LODSkinnedMeshFixtureTests, LODSkinnedMeshFixture, ::testing::Range<int>(1, 7));
+    INSTANTIATE_TEST_SUITE_P(LODSkinnedMeshFixtureTests, LODSkinnedMeshFixture, ::testing::Range<int>(1, 7));
 
     // TODO: Re-enabled the test when we can access viewport context in the SimpleLODComponent.
     TEST_F(LODSkinnedMeshColorFixture, DISABLED_CheckLODDistanceChange)
diff -up o3de/Gems/EMotionFX/Code/Tests/Vector3ParameterTests.cpp.gtest-suite o3de/Gems/EMotionFX/Code/Tests/Vector3ParameterTests.cpp
--- o3de/Gems/EMotionFX/Code/Tests/Vector3ParameterTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/EMotionFX/Code/Tests/Vector3ParameterTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -136,7 +136,7 @@ namespace EMotionFX
         AZ::Vector3(AZ::Constants::FloatMax, -AZ::Constants::FloatMax, AZ::Constants::FloatEpsilon)
     };
 
-    INSTANTIATE_TEST_CASE_P(Vector3Parameter_ValidOutputTests,
+    INSTANTIATE_TEST_SUITE_P(Vector3Parameter_ValidOutputTests,
         Vector3ParameterFixture,
         ::testing::ValuesIn(Vector3ParameterTestData)
     );
diff -up o3de/Gems/LmbrCentral/Code/Tests/CylinderShapeTest.cpp.gtest-suite o3de/Gems/LmbrCentral/Code/Tests/CylinderShapeTest.cpp
--- o3de/Gems/LmbrCentral/Code/Tests/CylinderShapeTest.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/LmbrCentral/Code/Tests/CylinderShapeTest.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -446,12 +446,12 @@ namespace UnitTest
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(ValidIntersections,
+    INSTANTIATE_TEST_SUITE_P(ValidIntersections,
         CylinderShapeRayIntersectTest,
         ::testing::ValuesIn(CylinderShapeRayIntersectTest::ShouldPass)
     );
 
-    INSTANTIATE_TEST_CASE_P(InvalidIntersections,
+    INSTANTIATE_TEST_SUITE_P(InvalidIntersections,
         CylinderShapeRayIntersectTest,
         ::testing::ValuesIn(CylinderShapeRayIntersectTest::ShouldFail)
     );
@@ -473,7 +473,7 @@ namespace UnitTest
         EXPECT_TRUE(aabb.GetMax().IsClose(maxExtent));
     }
 
-    INSTANTIATE_TEST_CASE_P(AABB,
+    INSTANTIATE_TEST_SUITE_P(AABB,
         CylinderShapeAABBTest,
         ::testing::ValuesIn(CylinderShapeAABBTest::ShouldPass)
     );
@@ -496,7 +496,7 @@ namespace UnitTest
         EXPECT_TRUE(aabb.GetMax().IsClose(maxExtent));
     }
 
-    INSTANTIATE_TEST_CASE_P(TransformAndLocalBounds,
+    INSTANTIATE_TEST_SUITE_P(TransformAndLocalBounds,
         CylinderShapeTransformAndLocalBoundsTest,
         ::testing::ValuesIn(CylinderShapeTransformAndLocalBoundsTest::ShouldPass)
     );
@@ -517,13 +517,13 @@ namespace UnitTest
         EXPECT_EQ(inside, expectedInside);
     }
 
-    INSTANTIATE_TEST_CASE_P(ValidIsPointInside,
+    INSTANTIATE_TEST_SUITE_P(ValidIsPointInside,
         CylinderShapeIsPointInsideTest,
         ::testing::ValuesIn(CylinderShapeIsPointInsideTest::ShouldPass)
     );
 
 
-    INSTANTIATE_TEST_CASE_P(InvalidIsPointInside,
+    INSTANTIATE_TEST_SUITE_P(InvalidIsPointInside,
         CylinderShapeIsPointInsideTest,
         ::testing::ValuesIn(CylinderShapeIsPointInsideTest::ShouldFail)
     );
@@ -545,7 +545,7 @@ namespace UnitTest
         EXPECT_NEAR(distance, expectedDistance, epsilon);
     }
 
-    INSTANTIATE_TEST_CASE_P(ValidIsDistanceFromPoint,
+    INSTANTIATE_TEST_SUITE_P(ValidIsDistanceFromPoint,
         CylinderShapeDistanceFromPointTest,
         ::testing::ValuesIn(CylinderShapeDistanceFromPointTest::ShouldPass)
     );
diff -up o3de/Gems/PhysX/Code/NumericalMethods/Tests/EigenanalysisTest.cpp.gtest-suite o3de/Gems/PhysX/Code/NumericalMethods/Tests/EigenanalysisTest.cpp
--- o3de/Gems/PhysX/Code/NumericalMethods/Tests/EigenanalysisTest.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/PhysX/Code/NumericalMethods/Tests/EigenanalysisTest.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -316,7 +316,7 @@ namespace NumericalMethods::Eigenanalysi
         EXPECT_NEAR(v3.Norm(), 1.0, 1e-6);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         OrthogonalComplementParams,
         ::testing::Values(
@@ -357,7 +357,7 @@ namespace NumericalMethods::Eigenanalysi
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(All, ComputeEigenvector0Params, ::testing::ValuesIn(testCasesUniqueEigenvalues));
+    INSTANTIATE_TEST_SUITE_P(All, ComputeEigenvector0Params, ::testing::ValuesIn(testCasesUniqueEigenvalues));
 
 
     class ComputeEigenvector1UniqueEigenvalueParams
@@ -399,7 +399,7 @@ namespace NumericalMethods::Eigenanalysi
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         ComputeEigenvector1UniqueEigenvalueParams,
         ::testing::ValuesIn(testCasesUniqueEigenvalues)
@@ -435,7 +435,7 @@ namespace NumericalMethods::Eigenanalysi
         );
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         ComputeEigenvector1RepeatedEigenvalueParams,
         ::testing::ValuesIn(testCasesRepeatedEigenvalues)
@@ -472,8 +472,8 @@ namespace NumericalMethods::Eigenanalysi
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(Unique, ComputeEigenvector2Params, ::testing::ValuesIn(testCasesUniqueEigenvalues));
-    INSTANTIATE_TEST_CASE_P(Repeated, ComputeEigenvector2Params, ::testing::ValuesIn(testCasesRepeatedEigenvalues));
+    INSTANTIATE_TEST_SUITE_P(Unique, ComputeEigenvector2Params, ::testing::ValuesIn(testCasesUniqueEigenvalues));
+    INSTANTIATE_TEST_SUITE_P(Repeated, ComputeEigenvector2Params, ::testing::ValuesIn(testCasesRepeatedEigenvalues));
 
 
     class NonIterativeSymmetricEigensolver3x3UniqueEigenvalueParams
@@ -514,7 +514,7 @@ namespace NumericalMethods::Eigenanalysi
         );
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         NonIterativeSymmetricEigensolver3x3UniqueEigenvalueParams,
         ::testing::ValuesIn(testCasesUniqueEigenvalues)
@@ -579,7 +579,7 @@ namespace NumericalMethods::Eigenanalysi
         );
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         NonIterativeSymmetricEigensolver3x3RepeatedEigenvalueParams,
         ::testing::ValuesIn(testCasesRepeatedEigenvalues)
@@ -617,7 +617,7 @@ namespace NumericalMethods::Eigenanalysi
         ExpectParallelUnitVector(ArrayToVector(result.m_eigenpairs[2].m_vector), { 0.0, 0.0, 1.0 }, 1e-6);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         NonIterativeSymmetricEigensolver3x3DiagonalMatrixParams,
         ::testing::Values(
diff -up o3de/Gems/PhysX/Code/Tests/CharacterControllerTests.cpp.gtest-suite o3de/Gems/PhysX/Code/Tests/CharacterControllerTests.cpp
--- o3de/Gems/PhysX/Code/Tests/CharacterControllerTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/PhysX/Code/Tests/CharacterControllerTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -347,7 +347,7 @@ namespace PhysX
         EXPECT_EQ(errorHandler.GetErrorCount(), 1);
     }
 
-    INSTANTIATE_TEST_CASE_P(PhysXCharacters, CharacterControllerFixture, ::testing::ValuesIn(controllerShapeTypes));
+    INSTANTIATE_TEST_SUITE_P(PhysXCharacters, CharacterControllerFixture, ::testing::ValuesIn(controllerShapeTypes));
 
     TEST_F(PhysXDefaultWorldTest, CharacterController_ResizingCapsuleControllerBelowTwiceRadius_EmitsError)
     {
diff -up o3de/Gems/PhysX/Code/Tests/PhysXComponentBusTests.cpp.gtest-suite o3de/Gems/PhysX/Code/Tests/PhysXComponentBusTests.cpp
--- o3de/Gems/PhysX/Code/Tests/PhysXComponentBusTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/PhysX/Code/Tests/PhysXComponentBusTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -926,7 +926,7 @@ namespace PhysX
         return ret;
     };
 
-    INSTANTIATE_TEST_CASE_P(, PhysicsRigidBodyRayBusTest,
+    INSTANTIATE_TEST_SUITE_P(, PhysicsRigidBodyRayBusTest,
         ::testing::Values(RigidBodyRaycastEBusCall, WorldBodyRaycastEBusCall),
         // Provide nice names for the tests runs
         [](const testing::TestParamInfo<PhysicsRigidBodyRayBusTest::ParamType>& info)
diff -up o3de/Gems/PhysX/Code/Tests/PhysXJointsTest.cpp.gtest-suite o3de/Gems/PhysX/Code/Tests/PhysXJointsTest.cpp
diff -up o3de/Gems/PhysX/Code/Tests/PhysXMultithreadingTest.cpp.gtest-suite o3de/Gems/PhysX/Code/Tests/PhysXMultithreadingTest.cpp
--- o3de/Gems/PhysX/Code/Tests/PhysXMultithreadingTest.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/PhysX/Code/Tests/PhysXMultithreadingTest.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -702,7 +702,7 @@ namespace PhysX
     }
 
 
-    INSTANTIATE_TEST_CASE_P(PhysXMultithreading, PhysXMultithreadingTest, ::testing::Values(1, 42, 123, 1337, 1403, 5317, 133987258));
+    INSTANTIATE_TEST_SUITE_P(PhysXMultithreading, PhysXMultithreadingTest, ::testing::Values(1, 42, 123, 1337, 1403, 5317, 133987258));
 }
 
 #ifdef PHYSX_MT_DEBUG_LOGS
diff -up o3de/Gems/PhysX/Code/Tests/PhysXSceneQueryTests.cpp.gtest-suite o3de/Gems/PhysX/Code/Tests/PhysXSceneQueryTests.cpp
--- o3de/Gems/PhysX/Code/Tests/PhysXSceneQueryTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/PhysX/Code/Tests/PhysXSceneQueryTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -555,7 +555,7 @@ namespace PhysX
         EXPECT_EQ(result.m_hits[0].m_shape, sphereShape.get());
     }
 
-    INSTANTIATE_TEST_CASE_P(PhysX, SceneQueryFlagsTestFixture, ::testing::Combine(
+    INSTANTIATE_TEST_SUITE_P(PhysX, SceneQueryFlagsTestFixture, ::testing::Combine(
         ::testing::Bool(),
         ::testing::Bool()));
 
diff -up o3de/Gems/PhysX/Code/Tests/PhysXSpecificTest.cpp.gtest-suite o3de/Gems/PhysX/Code/Tests/PhysXSpecificTest.cpp
--- o3de/Gems/PhysX/Code/Tests/PhysXSpecificTest.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/PhysX/Code/Tests/PhysXSpecificTest.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -281,7 +281,7 @@ namespace PhysX
     }
 
     auto entityFactories = { TestUtils::AddUnitTestObject<BoxColliderComponent>, TestUtils::AddUnitTestBoxComponentsMix };
-    INSTANTIATE_TEST_CASE_P(DifferentBoxes, PhysXEntityFactoryParamTest, ::testing::ValuesIn(entityFactories));
+    INSTANTIATE_TEST_SUITE_P(DifferentBoxes, PhysXEntityFactoryParamTest, ::testing::ValuesIn(entityFactories));
 
     TEST_F(PhysXSpecificTest, RigidBody_GetNativeType_ReturnsPhysXRigidBodyType)
     {
@@ -1232,7 +1232,7 @@ namespace PhysX
         EXPECT_TRUE(AZ::IsClose(expectedMass, mass, 0.001f));
     }
 
-    INSTANTIATE_TEST_CASE_P(PhysX, MultiShapesDensityTestFixture,
+    INSTANTIATE_TEST_SUITE_P(PhysX, MultiShapesDensityTestFixture,
         ::testing::Values(
             AZStd::make_pair(std::numeric_limits<float>::min(), std::numeric_limits<float>::max()),
             AZStd::make_pair(-std::numeric_limits<float>::max(), 0.0f),
@@ -1260,7 +1260,7 @@ namespace PhysX
             && resultingDensity <= Physics::MaterialConfiguration::MaxDensityLimit);
     }
 
-    INSTANTIATE_TEST_CASE_P(PhysX, DensityBoundariesTestFixture,
+    INSTANTIATE_TEST_SUITE_P(PhysX, DensityBoundariesTestFixture,
         ::testing::Values(
             std::numeric_limits<float>::min(),
             std::numeric_limits<float>::max(),
@@ -1432,7 +1432,7 @@ namespace PhysX
         AzPhysics::MassComputeFlags::COMPUTE_COM | AzPhysics::MassComputeFlags::COMPUTE_INERTIA | AzPhysics::MassComputeFlags::INCLUDE_ALL_SHAPES
     };
 
-    INSTANTIATE_TEST_CASE_P(PhysX, MassComputeFixture, ::testing::Combine(
+    INSTANTIATE_TEST_SUITE_P(PhysX, MassComputeFixture, ::testing::Combine(
         ::testing::ValuesIn({ SimulatedShapesMode::NONE, SimulatedShapesMode::MIXED, SimulatedShapesMode::ALL }),
         ::testing::ValuesIn(possibleMassComputeFlags),
         ::testing::Bool()));
diff -up o3de/Gems/PhysX/Code/Tests/PrimitiveShapeFitterTests.cpp.gtest-suite o3de/Gems/PhysX/Code/Tests/PrimitiveShapeFitterTests.cpp
--- o3de/Gems/PhysX/Code/Tests/PrimitiveShapeFitterTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/PhysX/Code/Tests/PrimitiveShapeFitterTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -136,7 +136,7 @@ namespace PhysX::Pipeline
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         ArgumentPackingTestFixture,
         ::testing::Values(
@@ -175,7 +175,7 @@ namespace PhysX::Pipeline
         EXPECT_NEAR(testData.m_shape->GetVolume(), testData.m_expectedVolume, 1e-6);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         VolumeTestFixture,
         ::testing::Values(
@@ -233,7 +233,7 @@ namespace PhysX::Pipeline
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         SquaredDistanceTestFixture,
         ::testing::Values(
@@ -476,7 +476,7 @@ namespace PhysX::Pipeline
         EXPECT_THAT(pair.second, ::testing::IsNull());
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         GetDegenerateShapeConfigurationTestFixture,
         ::testing::Values(
@@ -660,7 +660,7 @@ namespace PhysX::Pipeline
         }
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         All,
         FitPrimitiveShapeTestFixture,
         ::testing::ValuesIn(TestTransforms)
diff -up o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/MeshBuilderTests.cpp.gtest-suite o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/MeshBuilderTests.cpp
--- o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/MeshBuilderTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/MeshBuilderTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -203,7 +203,7 @@ namespace AZ::MeshBuilder
         }
     };
 
-    INSTANTIATE_TEST_CASE_P(MeshBuilderTest_MaxSubMeshVertices,
+    INSTANTIATE_TEST_SUITE_P(MeshBuilderTest_MaxSubMeshVertices,
         MeshBuilderFixture,
         ::testing::ValuesIn(meshBuilderMaxSubMeshVerticesTestData));
 } // namespace AZ::MeshBuilder
diff -up o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/MeshVerticesTests.cpp.gtest-suite o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/MeshVerticesTests.cpp
--- o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/MeshVerticesTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/MeshVerticesTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -228,7 +228,7 @@ namespace AZ::MeshBuilder
         9
     };
 
-    INSTANTIATE_TEST_CASE_P(TriangleFanZVertexDedupTests,
+    INSTANTIATE_TEST_SUITE_P(TriangleFanZVertexDedupTests,
         TriangleFanMeshVerticesTestsFixture,
         ::testing::ValuesIn(meshVerticesTestData)
     );
diff -up o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/SkinInfluencesTests.cpp.gtest-suite o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/SkinInfluencesTests.cpp
--- o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/SkinInfluencesTests.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/SceneProcessing/Code/Tests/MeshBuilder/SkinInfluencesTests.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -121,7 +121,7 @@ namespace AZ::MeshBuilder
         SkinInfluencesTestParam {/*.numOrgVertices =*/700, /*.maxSourceInfluences =*/12, /*.maxInfluencesAfterOptimization =*/3},
     };
 
-    INSTANTIATE_TEST_CASE_P(SkinInfluenceOptimizeTests,
+    INSTANTIATE_TEST_SUITE_P(SkinInfluenceOptimizeTests,
         SkinInfluencesFixture,
         ::testing::ValuesIn(skinInfluenceTestData)
     );
diff -up o3de/Gems/WhiteBox/Code/Tests/WhiteBoxRenderDataTest.cpp.gtest-suite o3de/Gems/WhiteBox/Code/Tests/WhiteBoxRenderDataTest.cpp
--- o3de/Gems/WhiteBox/Code/Tests/WhiteBoxRenderDataTest.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/WhiteBox/Code/Tests/WhiteBoxRenderDataTest.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -100,12 +100,12 @@ namespace UnitTest
         EXPECT_EQ(numOutTriangles, numInTriangles - faceData.m_numCulledFaces);
     }
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         NonDegenerateFaceList, WhiteBoxVertexDataTestFixture, ::testing::Values(NonDegenerateFaceList));
 
-    INSTANTIATE_TEST_CASE_P(DegenerateFaceList, WhiteBoxVertexDataTestFixture, ::testing::Values(DegenerateFaceList));
+    INSTANTIATE_TEST_SUITE_P(DegenerateFaceList, WhiteBoxVertexDataTestFixture, ::testing::Values(DegenerateFaceList));
 
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         DegenerateAndNonDegenerateFaceList, WhiteBoxVertexDataTestFixture,
         ::testing::Values(DegenerateAndNonDegenerateFaceList));
 } // namespace UnitTest
diff -up o3de/Gems/WhiteBox/Code/Tests/WhiteBoxUVTest.cpp.gtest-suite o3de/Gems/WhiteBox/Code/Tests/WhiteBoxUVTest.cpp
--- o3de/Gems/WhiteBox/Code/Tests/WhiteBoxUVTest.cpp.gtest-suite	2021-06-21 14:59:30.000000000 +0000
+++ o3de/Gems/WhiteBox/Code/Tests/WhiteBoxUVTest.cpp	2021-06-24 23:31:23.949560592 +0000
@@ -279,7 +279,7 @@ namespace UnitTest
     }
 
     // test with permutations of all noise values and sources with rotations around the x and z axis
-    INSTANTIATE_TEST_CASE_P(
+    INSTANTIATE_TEST_SUITE_P(
         , WhiteBoxUVTestFixture,
         ::testing::Combine(
             ::testing::ValuesIn(Noise), ::testing::ValuesIn(Source),
